;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/10/2015 14:56:37
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF006EF7D  	GOTO        3322
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_SPI1_Write:
;__Lib_SPI_c345.c,77 :: 		
;__Lib_SPI_c345.c,80 :: 		
0x001C	0xFFC9C0BF  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_c345.c,81 :: 		
L_SPI1_Write6:
0x0020	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0022	0xD002      	BRA         L_SPI1_Write7
;__Lib_SPI_c345.c,82 :: 		
0x0024	0x0000      	NOP
0x0026	0xD7FC      	BRA         L_SPI1_Write6
L_SPI1_Write7:
;__Lib_SPI_c345.c,83 :: 		
0x0028	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,85 :: 		
0x002C	0x0012      	RETURN      0
; end of _SPI1_Write
_SPI1_Read:
;__Lib_SPI_c345.c,66 :: 		
;__Lib_SPI_c345.c,67 :: 		
0x002E	0xFFC9C0BF  	MOVFF       FARG_SPI1_Read_buffer, SSPBUF
;__Lib_SPI_c345.c,68 :: 		
L_SPI1_Read4:
0x0032	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0034	0xD002      	BRA         L_SPI1_Read5
;__Lib_SPI_c345.c,69 :: 		
0x0036	0x0000      	NOP
0x0038	0xD7FC      	BRA         L_SPI1_Read4
L_SPI1_Read5:
;__Lib_SPI_c345.c,70 :: 		
0x003A	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_c345.c,73 :: 		
0x003E	0x0012      	RETURN      0
; end of _SPI1_Read
_write_ZIGBEE_long:
0x0040	0x0100      	MOVLB       0
0x0042	0x6BBE      	CLRF        write_ZIGBEE_long_address_low_L0, 1
;sensor.c,207 :: 		void write_ZIGBEE_long(int address, short int data_r) {
;sensor.c,210 :: 		CS2 = 0;
0x0044	0x908B      	BCF         LATC0_bit, 0 
;sensor.c,212 :: 		address_high = (((short int)(address >> 3)) & 0b01111111) | 0x80;  // calculating addressing mode
0x0046	0x0E03      	MOVLW       3
0x0048	0x6E02      	MOVWF       R2 
0x004A	0xF000C0BB  	MOVFF       FARG_write_ZIGBEE_long_address, R0
0x004E	0xF001C0BC  	MOVFF       FARG_write_ZIGBEE_long_address+1, R1
0x0052	0x5002      	MOVF        R2, 0 
L__write_ZIGBEE_long216:
0x0054	0xE007      	BZ          L__write_ZIGBEE_long217
0x0056	0x3201      	RRCF        R1, 1 
0x0058	0x3200      	RRCF        R0, 1 
0x005A	0x9E01      	BCF         R1, 7 
0x005C	0xBC01      	BTFSC       R1, 6 
0x005E	0x8E01      	BSF         R1, 7 
0x0060	0x0FFF      	ADDLW       255
0x0062	0xD7F8      	BRA         L__write_ZIGBEE_long216
L__write_ZIGBEE_long217:
0x0064	0x0E7F      	MOVLW       127
0x0066	0x1400      	ANDWF       R0, 0 
0x0068	0x6FBF      	MOVWF       FARG_SPI1_Write_data_, 1
0x006A	0x8FBF      	BSF         FARG_SPI1_Write_data_, 7, 1
;sensor.c,213 :: 		address_low  = (((short int)(address << 5)) & 0b11100000) | 0x10;  // calculating addressing mode
0x006C	0x0E05      	MOVLW       5
0x006E	0x6E00      	MOVWF       R0 
0x0070	0xF0BEC0BB  	MOVFF       FARG_write_ZIGBEE_long_address, write_ZIGBEE_long_address_low_L0
0x0074	0x5000      	MOVF        R0, 0 
L__write_ZIGBEE_long218:
0x0076	0xE004      	BZ          L__write_ZIGBEE_long219
0x0078	0x37BE      	RLCF        write_ZIGBEE_long_address_low_L0, 1, 1
0x007A	0x91BE      	BCF         write_ZIGBEE_long_address_low_L0, 0, 1
0x007C	0x0FFF      	ADDLW       255
0x007E	0xD7FB      	BRA         L__write_ZIGBEE_long218
L__write_ZIGBEE_long219:
0x0080	0x0EE0      	MOVLW       224
0x0082	0x17BE      	ANDWF       write_ZIGBEE_long_address_low_L0, 1, 1
0x0084	0x89BE      	BSF         write_ZIGBEE_long_address_low_L0, 4, 1
;sensor.c,214 :: 		SPI1_Write(address_high);           // addressing register
0x0086	0xDFCA      	RCALL       _SPI1_Write
;sensor.c,215 :: 		SPI1_Write(address_low);            // addressing register
0x0088	0xF0BFC0BE  	MOVFF       write_ZIGBEE_long_address_low_L0, FARG_SPI1_Write_data_
0x008C	0xDFC7      	RCALL       _SPI1_Write
;sensor.c,216 :: 		SPI1_Write(data_r);                 // write data in registerr
0x008E	0xF0BFC0BD  	MOVFF       FARG_write_ZIGBEE_long_data_r, FARG_SPI1_Write_data_
0x0092	0xDFC4      	RCALL       _SPI1_Write
;sensor.c,218 :: 		CS2 = 1;
0x0094	0x808B      	BSF         LATC0_bit, 0 
;sensor.c,219 :: 		}
0x0096	0x0012      	RETURN      0
; end of _write_ZIGBEE_long
_write_ZIGBEE_short:
;sensor.c,179 :: 		void write_ZIGBEE_short(short int address, short int data_r) {
;sensor.c,180 :: 		CS2 = 0;
0x0098	0x908B      	BCF         LATC0_bit, 0 
;sensor.c,182 :: 		address = ((address << 1) & 0b01111111) | 0x01; // calculating addressing mode
0x009A	0xF000C0BB  	MOVFF       FARG_write_ZIGBEE_short_address, R0
0x009E	0x3600      	RLCF        R0, 1 
0x00A0	0x9000      	BCF         R0, 0 
0x00A2	0x0E7F      	MOVLW       127
0x00A4	0x1600      	ANDWF       R0, 1 
0x00A6	0x8000      	BSF         R0, 0 
0x00A8	0xF0BBC000  	MOVFF       R0, FARG_write_ZIGBEE_short_address
;sensor.c,183 :: 		SPI1_Write(address);       // addressing register
0x00AC	0xF0BFC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x00B0	0xDFB5      	RCALL       _SPI1_Write
;sensor.c,184 :: 		SPI1_Write(data_r);        // write data in register
0x00B2	0xF0BFC0BC  	MOVFF       FARG_write_ZIGBEE_short_data_r, FARG_SPI1_Write_data_
0x00B6	0xDFB2      	RCALL       _SPI1_Write
;sensor.c,186 :: 		CS2 = 1;
0x00B8	0x808B      	BSF         LATC0_bit, 0 
;sensor.c,187 :: 		}
0x00BA	0x0012      	RETURN      0
; end of _write_ZIGBEE_short
_read_ZIGBEE_short:
0x00BC	0x0100      	MOVLB       0
0x00BE	0x6BBC      	CLRF        read_ZIGBEE_short_dummy_data_r_L0, 1
;sensor.c,190 :: 		short int read_ZIGBEE_short(short int address) {
;sensor.c,193 :: 		CS2 = 0;
0x00C0	0x908B      	BCF         LATC0_bit, 0 
;sensor.c,195 :: 		address = (address << 1) & 0b01111110;      // calculating addressing mode
0x00C2	0xF000C0BB  	MOVFF       FARG_read_ZIGBEE_short_address, R0
0x00C6	0x3600      	RLCF        R0, 1 
0x00C8	0x9000      	BCF         R0, 0 
0x00CA	0x0E7E      	MOVLW       126
0x00CC	0x1600      	ANDWF       R0, 1 
0x00CE	0xF0BBC000  	MOVFF       R0, FARG_read_ZIGBEE_short_address
;sensor.c,196 :: 		SPI1_Write(address);                        // addressing register
0x00D2	0xF0BFC000  	MOVFF       R0, FARG_SPI1_Write_data_
0x00D6	0xDFA2      	RCALL       _SPI1_Write
;sensor.c,197 :: 		data_r = SPI1_Read(dummy_data_r);           // read data from register
0x00D8	0xF0BFC0BC  	MOVFF       read_ZIGBEE_short_dummy_data_r_L0, FARG_SPI1_Read_buffer
0x00DC	0xDFA8      	RCALL       _SPI1_Read
;sensor.c,199 :: 		CS2 = 1;
0x00DE	0x808B      	BSF         LATC0_bit, 0 
;sensor.c,200 :: 		return data_r;
;sensor.c,201 :: 		}
0x00E0	0x0012      	RETURN      0
; end of _read_ZIGBEE_short
_RF_reset:
0x00E2	0x0100      	MOVLB       0
0x00E4	0x6BBA      	CLRF        RF_reset_temp_L0, 1
;sensor.c,404 :: 		void RF_reset() {
;sensor.c,406 :: 		temp = read_ZIGBEE_short(RFCTL);
0x00E6	0x0E36      	MOVLW       54
0x00E8	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x00EA	0xDFE8      	RCALL       _read_ZIGBEE_short
0x00EC	0xF0BAC000  	MOVFF       R0, RF_reset_temp_L0
;sensor.c,407 :: 		temp = temp | 0x04;                  // mask for RFRST bit
0x00F0	0x8400      	BSF         R0, 2 
0x00F2	0xF0BAC000  	MOVFF       R0, RF_reset_temp_L0
;sensor.c,408 :: 		write_ZIGBEE_short(RFCTL, temp);
0x00F6	0x0E36      	MOVLW       54
0x00F8	0x0100      	MOVLB       0
0x00FA	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x00FC	0xF0BCC000  	MOVFF       R0, FARG_write_ZIGBEE_short_data_r
0x0100	0xDFCB      	RCALL       _write_ZIGBEE_short
;sensor.c,409 :: 		temp = temp & (!0x04);               // mask for RFRST bit
0x0102	0x0E00      	MOVLW       0
0x0104	0x0100      	MOVLB       0
0x0106	0x15BA      	ANDWF       RF_reset_temp_L0, 0, 1
0x0108	0x6E00      	MOVWF       R0 
0x010A	0xF0BAC000  	MOVFF       R0, RF_reset_temp_L0
;sensor.c,410 :: 		write_ZIGBEE_short(RFCTL, temp);
0x010E	0x0E36      	MOVLW       54
0x0110	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0112	0xF0BCC000  	MOVFF       R0, FARG_write_ZIGBEE_short_data_r
0x0116	0xDFC0      	RCALL       _write_ZIGBEE_short
;sensor.c,411 :: 		Delay_ms(1);
0x0118	0x0E04      	MOVLW       4
0x011A	0x6E0C      	MOVWF       R12, 0
0x011C	0x0E3D      	MOVLW       61
0x011E	0x6E0D      	MOVWF       R13, 0
L_RF_reset10:
0x0120	0x2E0D      	DECFSZ      R13, 1, 0
0x0122	0xD7FE      	BRA         L_RF_reset10
0x0124	0x2E0C      	DECFSZ      R12, 1, 0
0x0126	0xD7FC      	BRA         L_RF_reset10
0x0128	0x0000      	NOP
0x012A	0x0000      	NOP
;sensor.c,412 :: 		}
0x012C	0x0012      	RETURN      0
; end of _RF_reset
_enable_PLL:
;sensor.c,757 :: 		void enable_PLL() {
;sensor.c,758 :: 		write_ZIGBEE_long(RFCON2, 0x80);       // mask for PLL enable
0x012E	0x0E02      	MOVLW       2
0x0130	0x0100      	MOVLB       0
0x0132	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0134	0x0E02      	MOVLW       2
0x0136	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0138	0x0E80      	MOVLW       128
0x013A	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x013C	0xDF81      	RCALL       _write_ZIGBEE_long
;sensor.c,759 :: 		}
0x013E	0x0012      	RETURN      0
; end of _enable_PLL
_enable_interrupt:
;sensor.c,417 :: 		void enable_interrupt() {
;sensor.c,418 :: 		write_ZIGBEE_short(INTCON_M, 0x00);   // 0x00  all interrupts are enable
0x0140	0x0E32      	MOVLW       50
0x0142	0x0100      	MOVLB       0
0x0144	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0146	0x6BBC      	CLRF        FARG_write_ZIGBEE_short_data_r, 1
0x0148	0xDFA7      	RCALL       _write_ZIGBEE_short
;sensor.c,419 :: 		}
0x014A	0x0012      	RETURN      0
; end of _enable_interrupt
_set_channel:
;sensor.c,424 :: 		void set_channel(short int channel_number) {               // 11-26 possible channels
;sensor.c,425 :: 		if((channel_number > 26) || (channel_number < 11)) channel_number = 11;
0x014C	0x0E80      	MOVLW       128
0x014E	0x0A1A      	XORLW       26
0x0150	0x6E00      	MOVWF       R0 
0x0152	0x0E80      	MOVLW       128
0x0154	0x0100      	MOVLB       0
0x0156	0x19B9      	XORWF       FARG_set_channel_channel_number, 0, 1
0x0158	0x5C00      	SUBWF       R0, 0 
0x015A	0xE308      	BNC         L__set_channel199
0x015C	0x0E80      	MOVLW       128
0x015E	0x19B9      	XORWF       FARG_set_channel_channel_number, 0, 1
0x0160	0x6E00      	MOVWF       R0 
0x0162	0x0E80      	MOVLW       128
0x0164	0x0A0B      	XORLW       11
0x0166	0x5C00      	SUBWF       R0, 0 
0x0168	0xE301      	BNC         L__set_channel199
0x016A	0xD002      	BRA         L_set_channel13
L__set_channel199:
0x016C	0x0E0B      	MOVLW       11
0x016E	0x6FB9      	MOVWF       FARG_set_channel_channel_number, 1
L_set_channel13:
;sensor.c,426 :: 		switch(channel_number) {
0x0170	0xD08F      	BRA         L_set_channel14
;sensor.c,427 :: 		case 11:
L_set_channel16:
;sensor.c,428 :: 		write_ZIGBEE_long(RFCON0, 0x02);  // 0x02 for 11. channel
0x0172	0x0E00      	MOVLW       0
0x0174	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0176	0x0E02      	MOVLW       2
0x0178	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x017A	0x0E02      	MOVLW       2
0x017C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x017E	0xDF60      	RCALL       _write_ZIGBEE_long
;sensor.c,429 :: 		break;
0x0180	0xD0BF      	BRA         L_set_channel15
;sensor.c,430 :: 		case 12:
L_set_channel17:
;sensor.c,431 :: 		write_ZIGBEE_long(RFCON0, 0x12);  // 0x12 for 12. channel
0x0182	0x0E00      	MOVLW       0
0x0184	0x0100      	MOVLB       0
0x0186	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0188	0x0E02      	MOVLW       2
0x018A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x018C	0x0E12      	MOVLW       18
0x018E	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0190	0xDF57      	RCALL       _write_ZIGBEE_long
;sensor.c,432 :: 		break;
0x0192	0xD0B6      	BRA         L_set_channel15
;sensor.c,433 :: 		case 13:
L_set_channel18:
;sensor.c,434 :: 		write_ZIGBEE_long(RFCON0, 0x22);  // 0x22 for 13. channel
0x0194	0x0E00      	MOVLW       0
0x0196	0x0100      	MOVLB       0
0x0198	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x019A	0x0E02      	MOVLW       2
0x019C	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x019E	0x0E22      	MOVLW       34
0x01A0	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01A2	0xDF4E      	RCALL       _write_ZIGBEE_long
;sensor.c,435 :: 		break;
0x01A4	0xD0AD      	BRA         L_set_channel15
;sensor.c,436 :: 		case 14:
L_set_channel19:
;sensor.c,437 :: 		write_ZIGBEE_long(RFCON0, 0x32);  // 0x32 for 14. channel
0x01A6	0x0E00      	MOVLW       0
0x01A8	0x0100      	MOVLB       0
0x01AA	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x01AC	0x0E02      	MOVLW       2
0x01AE	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x01B0	0x0E32      	MOVLW       50
0x01B2	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01B4	0xDF45      	RCALL       _write_ZIGBEE_long
;sensor.c,438 :: 		break;
0x01B6	0xD0A4      	BRA         L_set_channel15
;sensor.c,439 :: 		case 15:
L_set_channel20:
;sensor.c,440 :: 		write_ZIGBEE_long(RFCON0, 0x42);  // 0x42 for 15. channel
0x01B8	0x0E00      	MOVLW       0
0x01BA	0x0100      	MOVLB       0
0x01BC	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x01BE	0x0E02      	MOVLW       2
0x01C0	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x01C2	0x0E42      	MOVLW       66
0x01C4	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01C6	0xDF3C      	RCALL       _write_ZIGBEE_long
;sensor.c,441 :: 		break;
0x01C8	0xD09B      	BRA         L_set_channel15
;sensor.c,442 :: 		case 16:
L_set_channel21:
;sensor.c,443 :: 		write_ZIGBEE_long(RFCON0, 0x52);  // 0x52 for 16. channel
0x01CA	0x0E00      	MOVLW       0
0x01CC	0x0100      	MOVLB       0
0x01CE	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x01D0	0x0E02      	MOVLW       2
0x01D2	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x01D4	0x0E52      	MOVLW       82
0x01D6	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01D8	0xDF33      	RCALL       _write_ZIGBEE_long
;sensor.c,444 :: 		break;
0x01DA	0xD092      	BRA         L_set_channel15
;sensor.c,445 :: 		case 17:
L_set_channel22:
;sensor.c,446 :: 		write_ZIGBEE_long(RFCON0, 0x62);  // 0x62 for 17. channel
0x01DC	0x0E00      	MOVLW       0
0x01DE	0x0100      	MOVLB       0
0x01E0	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x01E2	0x0E02      	MOVLW       2
0x01E4	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x01E6	0x0E62      	MOVLW       98
0x01E8	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01EA	0xDF2A      	RCALL       _write_ZIGBEE_long
;sensor.c,447 :: 		break;
0x01EC	0xD089      	BRA         L_set_channel15
;sensor.c,448 :: 		case 18:
L_set_channel23:
;sensor.c,449 :: 		write_ZIGBEE_long(RFCON0, 0x72);  // 0x72 for 18. channel
0x01EE	0x0E00      	MOVLW       0
0x01F0	0x0100      	MOVLB       0
0x01F2	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x01F4	0x0E02      	MOVLW       2
0x01F6	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x01F8	0x0E72      	MOVLW       114
0x01FA	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x01FC	0xDF21      	RCALL       _write_ZIGBEE_long
;sensor.c,450 :: 		break;
0x01FE	0xD080      	BRA         L_set_channel15
;sensor.c,451 :: 		case 19:
L_set_channel24:
;sensor.c,452 :: 		write_ZIGBEE_long(RFCON0, 0x82);  // 0x82 for 19. channel
0x0200	0x0E00      	MOVLW       0
0x0202	0x0100      	MOVLB       0
0x0204	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0206	0x0E02      	MOVLW       2
0x0208	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x020A	0x0E82      	MOVLW       130
0x020C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x020E	0xDF18      	RCALL       _write_ZIGBEE_long
;sensor.c,453 :: 		break;
0x0210	0xD077      	BRA         L_set_channel15
;sensor.c,454 :: 		case 20:
L_set_channel25:
;sensor.c,455 :: 		write_ZIGBEE_long(RFCON0, 0x92);  // 0x92 for 20. channel
0x0212	0x0E00      	MOVLW       0
0x0214	0x0100      	MOVLB       0
0x0216	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0218	0x0E02      	MOVLW       2
0x021A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x021C	0x0E92      	MOVLW       146
0x021E	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0220	0xDF0F      	RCALL       _write_ZIGBEE_long
;sensor.c,456 :: 		break;
0x0222	0xD06E      	BRA         L_set_channel15
;sensor.c,457 :: 		case 21:
L_set_channel26:
;sensor.c,458 :: 		write_ZIGBEE_long(RFCON0, 0xA2);  // 0xA2 for 21. channel
0x0224	0x0E00      	MOVLW       0
0x0226	0x0100      	MOVLB       0
0x0228	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x022A	0x0E02      	MOVLW       2
0x022C	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x022E	0x0EA2      	MOVLW       162
0x0230	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0232	0xDF06      	RCALL       _write_ZIGBEE_long
;sensor.c,459 :: 		break;
0x0234	0xD065      	BRA         L_set_channel15
;sensor.c,460 :: 		case 22:
L_set_channel27:
;sensor.c,461 :: 		write_ZIGBEE_long(RFCON0, 0xB2);  // 0xB2 for 22. channel
0x0236	0x0E00      	MOVLW       0
0x0238	0x0100      	MOVLB       0
0x023A	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x023C	0x0E02      	MOVLW       2
0x023E	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0240	0x0EB2      	MOVLW       178
0x0242	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0244	0xDEFD      	RCALL       _write_ZIGBEE_long
;sensor.c,462 :: 		break;
0x0246	0xD05C      	BRA         L_set_channel15
;sensor.c,463 :: 		case 23:
L_set_channel28:
;sensor.c,464 :: 		write_ZIGBEE_long(RFCON0, 0xC2);  // 0xC2 for 23. channel
0x0248	0x0E00      	MOVLW       0
0x024A	0x0100      	MOVLB       0
0x024C	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x024E	0x0E02      	MOVLW       2
0x0250	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0252	0x0EC2      	MOVLW       194
0x0254	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0256	0xDEF4      	RCALL       _write_ZIGBEE_long
;sensor.c,465 :: 		break;
0x0258	0xD053      	BRA         L_set_channel15
;sensor.c,466 :: 		case 24:
L_set_channel29:
;sensor.c,467 :: 		write_ZIGBEE_long(RFCON0, 0xD2);  // 0xD2 for 24. channel
0x025A	0x0E00      	MOVLW       0
0x025C	0x0100      	MOVLB       0
0x025E	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0260	0x0E02      	MOVLW       2
0x0262	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0264	0x0ED2      	MOVLW       210
0x0266	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x0268	0xDEEB      	RCALL       _write_ZIGBEE_long
;sensor.c,468 :: 		break;
0x026A	0xD04A      	BRA         L_set_channel15
;sensor.c,469 :: 		case 25:
L_set_channel30:
;sensor.c,470 :: 		write_ZIGBEE_long(RFCON0, 0xE2);  // 0xE2 for 25. channel
0x026C	0x0E00      	MOVLW       0
0x026E	0x0100      	MOVLB       0
0x0270	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0272	0x0E02      	MOVLW       2
0x0274	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0276	0x0EE2      	MOVLW       226
0x0278	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x027A	0xDEE2      	RCALL       _write_ZIGBEE_long
;sensor.c,471 :: 		break;
0x027C	0xD041      	BRA         L_set_channel15
;sensor.c,472 :: 		case 26:
L_set_channel31:
;sensor.c,473 :: 		write_ZIGBEE_long(RFCON0, 0xF2);  // 0xF2 for 26. channel
0x027E	0x0E00      	MOVLW       0
0x0280	0x0100      	MOVLB       0
0x0282	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0284	0x0E02      	MOVLW       2
0x0286	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0288	0x0EF2      	MOVLW       242
0x028A	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x028C	0xDED9      	RCALL       _write_ZIGBEE_long
;sensor.c,474 :: 		break;
0x028E	0xD038      	BRA         L_set_channel15
;sensor.c,475 :: 		}
L_set_channel14:
0x0290	0x0100      	MOVLB       0
0x0292	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x0294	0x0A0B      	XORLW       11
0x0296	0xB4D8      	BTFSC       STATUS, 2 
0x0298	0xD76C      	BRA         L_set_channel16
0x029A	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x029C	0x0A0C      	XORLW       12
0x029E	0xB4D8      	BTFSC       STATUS, 2 
0x02A0	0xD770      	BRA         L_set_channel17
0x02A2	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02A4	0x0A0D      	XORLW       13
0x02A6	0xB4D8      	BTFSC       STATUS, 2 
0x02A8	0xD775      	BRA         L_set_channel18
0x02AA	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02AC	0x0A0E      	XORLW       14
0x02AE	0xB4D8      	BTFSC       STATUS, 2 
0x02B0	0xD77A      	BRA         L_set_channel19
0x02B2	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02B4	0x0A0F      	XORLW       15
0x02B6	0xB4D8      	BTFSC       STATUS, 2 
0x02B8	0xD77F      	BRA         L_set_channel20
0x02BA	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02BC	0x0A10      	XORLW       16
0x02BE	0xB4D8      	BTFSC       STATUS, 2 
0x02C0	0xD784      	BRA         L_set_channel21
0x02C2	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02C4	0x0A11      	XORLW       17
0x02C6	0xB4D8      	BTFSC       STATUS, 2 
0x02C8	0xD789      	BRA         L_set_channel22
0x02CA	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02CC	0x0A12      	XORLW       18
0x02CE	0xE08F      	BZ          L_set_channel23
0x02D0	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02D2	0x0A13      	XORLW       19
0x02D4	0xE095      	BZ          L_set_channel24
0x02D6	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02D8	0x0A14      	XORLW       20
0x02DA	0xE09B      	BZ          L_set_channel25
0x02DC	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02DE	0x0A15      	XORLW       21
0x02E0	0xE0A1      	BZ          L_set_channel26
0x02E2	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02E4	0x0A16      	XORLW       22
0x02E6	0xE0A7      	BZ          L_set_channel27
0x02E8	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02EA	0x0A17      	XORLW       23
0x02EC	0xE0AD      	BZ          L_set_channel28
0x02EE	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02F0	0x0A18      	XORLW       24
0x02F2	0xE0B3      	BZ          L_set_channel29
0x02F4	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02F6	0x0A19      	XORLW       25
0x02F8	0xE0B9      	BZ          L_set_channel30
0x02FA	0x51B9      	MOVF        FARG_set_channel_channel_number, 0, 1
0x02FC	0x0A1A      	XORLW       26
0x02FE	0xE0BF      	BZ          L_set_channel31
L_set_channel15:
;sensor.c,476 :: 		RF_reset();
0x0300	0xDEF0      	RCALL       _RF_reset
;sensor.c,477 :: 		}
0x0302	0x0012      	RETURN      0
; end of _set_channel
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0304	0x0E29      	MOVLW       41
0x0306	0x6E0D      	MOVWF       R13, 0
L_Delay_50us3:
0x0308	0x2E0D      	DECFSZ      R13, 1, 0
0x030A	0xD7FE      	BRA         L_Delay_50us3
0x030C	0x0000      	NOP
;__Lib_Delays.c,21 :: 		}
0x030E	0x0012      	RETURN      0
; end of _Delay_50us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0310	0x0000      	NOP
0x0312	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
0x0314	0x0012      	RETURN      0
; end of _Delay_1us
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0316	0x0E12      	MOVLW       18
0x0318	0x6E0C      	MOVWF       R12, 0
0x031A	0x0EDA      	MOVLW       218
0x031C	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us6:
0x031E	0x2E0D      	DECFSZ      R13, 1, 0
0x0320	0xD7FE      	BRA         L_Delay_5500us6
0x0322	0x2E0C      	DECFSZ      R12, 1, 0
0x0324	0xD7FC      	BRA         L_Delay_5500us6
0x0326	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
0x0328	0x0012      	RETURN      0
; end of _Delay_5500us
_set_RSSI_mode:
;sensor.c,526 :: 		void set_RSSI_mode(short int RSSI_mode) {       // 1 for RSSI1, 2 for RSSI2 mode
;sensor.c,529 :: 		switch(RSSI_mode) {
0x032A	0xD013      	BRA         L_set_RSSI_mode37
;sensor.c,530 :: 		case 1: {
L_set_RSSI_mode39:
;sensor.c,531 :: 		temp = read_ZIGBEE_short(BBREG6);
0x032C	0x0E3E      	MOVLW       62
0x032E	0x0100      	MOVLB       0
0x0330	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0332	0xDEC4      	RCALL       _read_ZIGBEE_short
;sensor.c,532 :: 		temp = temp | 0x80;                       // 0x80 mask for RSSI1 mode
0x0334	0x0E80      	MOVLW       128
0x0336	0x1000      	IORWF       R0, 0 
0x0338	0x0100      	MOVLB       0
0x033A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,533 :: 		write_ZIGBEE_short(BBREG6, temp);
0x033C	0x0E3E      	MOVLW       62
0x033E	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0340	0xDEAB      	RCALL       _write_ZIGBEE_short
;sensor.c,535 :: 		break;
0x0342	0xD00E      	BRA         L_set_RSSI_mode38
;sensor.c,537 :: 		case 2:
L_set_RSSI_mode40:
;sensor.c,538 :: 		write_ZIGBEE_short(BBREG6, 0x40);         // 0x40 data for RSSI2 mode
0x0344	0x0E3E      	MOVLW       62
0x0346	0x0100      	MOVLB       0
0x0348	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x034A	0x0E40      	MOVLW       64
0x034C	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x034E	0xDEA4      	RCALL       _write_ZIGBEE_short
;sensor.c,539 :: 		break;
0x0350	0xD007      	BRA         L_set_RSSI_mode38
;sensor.c,540 :: 		}
L_set_RSSI_mode37:
0x0352	0x0100      	MOVLB       0
0x0354	0x51B9      	MOVF        FARG_set_RSSI_mode_RSSI_mode, 0, 1
0x0356	0x0A01      	XORLW       1
0x0358	0xE0E9      	BZ          L_set_RSSI_mode39
0x035A	0x51B9      	MOVF        FARG_set_RSSI_mode_RSSI_mode, 0, 1
0x035C	0x0A02      	XORLW       2
0x035E	0xE0F2      	BZ          L_set_RSSI_mode40
L_set_RSSI_mode38:
;sensor.c,541 :: 		}
0x0360	0x0012      	RETURN      0
; end of _set_RSSI_mode
_set_CCA_mode:
;sensor.c,482 :: 		void set_CCA_mode(short int CCA_mode) {
;sensor.c,484 :: 		switch(CCA_mode) {
0x0362	0xD04E      	BRA         L_set_CCA_mode32
;sensor.c,485 :: 		case 1: {                               // ENERGY ABOVE THRESHOLD
L_set_CCA_mode34:
;sensor.c,486 :: 		temp = read_ZIGBEE_short(BBREG2);
0x0364	0x0E3A      	MOVLW       58
0x0366	0x0100      	MOVLB       0
0x0368	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x036A	0xDEA8      	RCALL       _read_ZIGBEE_short
;sensor.c,487 :: 		temp = temp | 0x80;                   // 0x80 mask
0x036C	0x0E80      	MOVLW       128
0x036E	0x1000      	IORWF       R0, 0 
0x0370	0x0100      	MOVLB       0
0x0372	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,488 :: 		temp = temp & 0xDF;                   // 0xDF mask
0x0374	0x0EDF      	MOVLW       223
0x0376	0x17BC      	ANDWF       FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,489 :: 		write_ZIGBEE_short(BBREG2, temp);
0x0378	0x0E3A      	MOVLW       58
0x037A	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x037C	0xDE8D      	RCALL       _write_ZIGBEE_short
;sensor.c,490 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x037E	0x0E3F      	MOVLW       63
0x0380	0x0100      	MOVLB       0
0x0382	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0384	0x0E60      	MOVLW       96
0x0386	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x0388	0xDE87      	RCALL       _write_ZIGBEE_short
;sensor.c,492 :: 		break;
0x038A	0xD044      	BRA         L_set_CCA_mode33
;sensor.c,494 :: 		case 2: {                               // CARRIER SENSE ONLY
L_set_CCA_mode35:
;sensor.c,495 :: 		temp = read_ZIGBEE_short(BBREG2);
0x038C	0x0E3A      	MOVLW       58
0x038E	0x0100      	MOVLB       0
0x0390	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0392	0xDE94      	RCALL       _read_ZIGBEE_short
;sensor.c,496 :: 		temp = temp | 0x40;                   // 0x40 mask
0x0394	0x0E40      	MOVLW       64
0x0396	0x1000      	IORWF       R0, 0 
0x0398	0x0100      	MOVLB       0
0x039A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,497 :: 		temp = temp & 0x7F;                   // 0x7F mask
0x039C	0x0E7F      	MOVLW       127
0x039E	0x17BC      	ANDWF       FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,498 :: 		write_ZIGBEE_short(BBREG2, temp);
0x03A0	0x0E3A      	MOVLW       58
0x03A2	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x03A4	0xDE79      	RCALL       _write_ZIGBEE_short
;sensor.c,500 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x03A6	0x0E3A      	MOVLW       58
0x03A8	0x0100      	MOVLB       0
0x03AA	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x03AC	0xDE87      	RCALL       _read_ZIGBEE_short
;sensor.c,501 :: 		temp = temp | 0x38;
0x03AE	0x0E38      	MOVLW       56
0x03B0	0x1000      	IORWF       R0, 0 
0x03B2	0x0100      	MOVLB       0
0x03B4	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,502 :: 		temp = temp & 0xFB;
0x03B6	0x0EFB      	MOVLW       251
0x03B8	0x17BC      	ANDWF       FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,503 :: 		write_ZIGBEE_short(BBREG2, temp);
0x03BA	0x0E3A      	MOVLW       58
0x03BC	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x03BE	0xDE6C      	RCALL       _write_ZIGBEE_short
;sensor.c,505 :: 		break;
0x03C0	0xD029      	BRA         L_set_CCA_mode33
;sensor.c,507 :: 		case 3: {                               // CARRIER SENSE AND ENERGY ABOVE THRESHOLD
L_set_CCA_mode36:
;sensor.c,508 :: 		temp = read_ZIGBEE_short(BBREG2);
0x03C2	0x0E3A      	MOVLW       58
0x03C4	0x0100      	MOVLB       0
0x03C6	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x03C8	0xDE79      	RCALL       _read_ZIGBEE_short
;sensor.c,509 :: 		temp = temp | 0xC0;                   // 0xC0 mask
0x03CA	0x0EC0      	MOVLW       192
0x03CC	0x1000      	IORWF       R0, 0 
0x03CE	0x0100      	MOVLB       0
0x03D0	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,510 :: 		write_ZIGBEE_short(BBREG2, temp);
0x03D2	0x0E3A      	MOVLW       58
0x03D4	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x03D6	0xDE60      	RCALL       _write_ZIGBEE_short
;sensor.c,512 :: 		temp = read_ZIGBEE_short(BBREG2);     // carrier sense threshold
0x03D8	0x0E3A      	MOVLW       58
0x03DA	0x0100      	MOVLB       0
0x03DC	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x03DE	0xDE6E      	RCALL       _read_ZIGBEE_short
;sensor.c,513 :: 		temp = temp | 0x38;                   // 0x38 mask
0x03E0	0x0E38      	MOVLW       56
0x03E2	0x1000      	IORWF       R0, 0 
0x03E4	0x0100      	MOVLB       0
0x03E6	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,514 :: 		temp = temp & 0xFB;                   // 0xFB mask
0x03E8	0x0EFB      	MOVLW       251
0x03EA	0x17BC      	ANDWF       FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,515 :: 		write_ZIGBEE_short(BBREG2, temp);
0x03EC	0x0E3A      	MOVLW       58
0x03EE	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x03F0	0xDE53      	RCALL       _write_ZIGBEE_short
;sensor.c,517 :: 		write_ZIGBEE_short(CCAEDTH, 0x60);    // Set CCA ED threshold to -69 dBm
0x03F2	0x0E3F      	MOVLW       63
0x03F4	0x0100      	MOVLB       0
0x03F6	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x03F8	0x0E60      	MOVLW       96
0x03FA	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x03FC	0xDE4D      	RCALL       _write_ZIGBEE_short
;sensor.c,519 :: 		break;
0x03FE	0xD00A      	BRA         L_set_CCA_mode33
;sensor.c,520 :: 		}
L_set_CCA_mode32:
0x0400	0x0100      	MOVLB       0
0x0402	0x51B9      	MOVF        FARG_set_CCA_mode_CCA_mode, 0, 1
0x0404	0x0A01      	XORLW       1
0x0406	0xE0AE      	BZ          L_set_CCA_mode34
0x0408	0x51B9      	MOVF        FARG_set_CCA_mode_CCA_mode, 0, 1
0x040A	0x0A02      	XORLW       2
0x040C	0xE0BF      	BZ          L_set_CCA_mode35
0x040E	0x51B9      	MOVF        FARG_set_CCA_mode_CCA_mode, 0, 1
0x0410	0x0A03      	XORLW       3
0x0412	0xE0D7      	BZ          L_set_CCA_mode36
L_set_CCA_mode33:
;sensor.c,521 :: 		}
0x0414	0x0012      	RETURN      0
; end of _set_CCA_mode
_init_ZIGBEE_basic:
;sensor.c,779 :: 		void init_ZIGBEE_basic() {
;sensor.c,780 :: 		write_ZIGBEE_short(PACON2, 0x98);   // Initialize FIFOEN = 1 and TXONTS = 0x6
0x0416	0x0E18      	MOVLW       24
0x0418	0x0100      	MOVLB       0
0x041A	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x041C	0x0E98      	MOVLW       152
0x041E	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x0420	0xDE3B      	RCALL       _write_ZIGBEE_short
;sensor.c,781 :: 		write_ZIGBEE_short(TXSTBL, 0x95);   // Initialize RFSTBL = 0x9
0x0422	0x0E2E      	MOVLW       46
0x0424	0x0100      	MOVLB       0
0x0426	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0428	0x0E95      	MOVLW       149
0x042A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x042C	0xDE35      	RCALL       _write_ZIGBEE_short
;sensor.c,782 :: 		write_ZIGBEE_long(RFCON1, 0x01);    // Initialize VCOOPT = 0x01
0x042E	0x0E01      	MOVLW       1
0x0430	0x0100      	MOVLB       0
0x0432	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0434	0x0E02      	MOVLW       2
0x0436	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0438	0x0E01      	MOVLW       1
0x043A	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x043C	0xDE01      	RCALL       _write_ZIGBEE_long
;sensor.c,783 :: 		enable_PLL();                       // Enable PLL (PLLEN = 1)
0x043E	0xDE77      	RCALL       _enable_PLL
;sensor.c,784 :: 		write_ZIGBEE_long(RFCON6, 0x90);    // Initialize TXFIL = 1 and 20MRECVR = 1
0x0440	0x0E06      	MOVLW       6
0x0442	0x0100      	MOVLB       0
0x0444	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0446	0x0E02      	MOVLW       2
0x0448	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x044A	0x0E90      	MOVLW       144
0x044C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x044E	0xDDF8      	RCALL       _write_ZIGBEE_long
;sensor.c,785 :: 		write_ZIGBEE_long(RFCON7, 0x80);    // Initialize SLPCLKSEL = 0x2 (100 kHz Internal oscillator)
0x0450	0x0E07      	MOVLW       7
0x0452	0x0100      	MOVLB       0
0x0454	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0456	0x0E02      	MOVLW       2
0x0458	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x045A	0x0E80      	MOVLW       128
0x045C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x045E	0xDDF0      	RCALL       _write_ZIGBEE_long
;sensor.c,786 :: 		write_ZIGBEE_long(RFCON8, 0x10);    // Initialize RFVCO = 1
0x0460	0x0E08      	MOVLW       8
0x0462	0x0100      	MOVLB       0
0x0464	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0466	0x0E02      	MOVLW       2
0x0468	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x046A	0x0E10      	MOVLW       16
0x046C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x046E	0xDDE8      	RCALL       _write_ZIGBEE_long
;sensor.c,787 :: 		write_ZIGBEE_long(SLPCON1, 0x21);   // Initialize CLKOUTEN = 1 and SLPCLKDIV = 0x01
0x0470	0x0E20      	MOVLW       32
0x0472	0x0100      	MOVLB       0
0x0474	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0476	0x0E02      	MOVLW       2
0x0478	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x047A	0x0E21      	MOVLW       33
0x047C	0x6FBD      	MOVWF       FARG_write_ZIGBEE_long_data_r, 1
0x047E	0xDDE0      	RCALL       _write_ZIGBEE_long
;sensor.c,788 :: 		}
0x0480	0x0012      	RETURN      0
; end of _init_ZIGBEE_basic
_SPI1_Init_Advanced:
;__Lib_SPI_c345.c,40 :: 		
;__Lib_SPI_c345.c,41 :: 		
0x0482	0x0E2E      	MOVLW       _SPI1_Read
0x0484	0x0100      	MOVLB       0
0x0486	0x6F8A      	MOVWF       _SPI_Rd_Ptr, 1
0x0488	0x0E00      	MOVLW       hi_addr(_SPI1_Read)
0x048A	0x6F8B      	MOVWF       _SPI_Rd_Ptr+1, 1
0x048C	0x0EBF      	MOVLW       FARG_SPI1_Read_buffer
0x048E	0x6F8C      	MOVWF       _SPI_Rd_Ptr+2, 1
0x0490	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x0492	0x6F8D      	MOVWF       _SPI_Rd_Ptr+3, 1
;__Lib_SPI_c345.c,42 :: 		
0x0494	0x0E1C      	MOVLW       _SPI1_Write
0x0496	0x6F8E      	MOVWF       _SPI_Wr_Ptr, 1
0x0498	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x049A	0x6F8F      	MOVWF       _SPI_Wr_Ptr+1, 1
0x049C	0x0EBF      	MOVLW       FARG_SPI1_Write_data_
0x049E	0x6F90      	MOVWF       _SPI_Wr_Ptr+2, 1
0x04A0	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x04A2	0x6F91      	MOVWF       _SPI_Wr_Ptr+3, 1
;__Lib_SPI_c345.c,44 :: 		
0x04A4	0x9A94      	BCF         TRISC5_bit, 5 
;__Lib_SPI_c345.c,45 :: 		
0x04A6	0x9694      	BCF         TRISC3_bit, 3 
;__Lib_SPI_c345.c,46 :: 		
0x04A8	0x8894      	BSF         TRISC4_bit, 4 
;__Lib_SPI_c345.c,48 :: 		
0x04AA	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_c345.c,49 :: 		
0x04AC	0x51B5      	MOVF        FARG_SPI1_Init_Advanced_master, 0, 1
0x04AE	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,50 :: 		
0x04B0	0x51B7      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 0, 1
0x04B2	0x12C6      	IORWF       SSPCON1, 1 
;__Lib_SPI_c345.c,51 :: 		
0x04B4	0x51B6      	MOVF        FARG_SPI1_Init_Advanced_data_sample, 0, 1
0x04B6	0x12C7      	IORWF       SSPSTAT, 1 
;__Lib_SPI_c345.c,53 :: 		
0x04B8	0x53B7      	MOVF        FARG_SPI1_Init_Advanced_clock_idle, 1, 1
0x04BA	0xE005      	BZ          L_SPI1_Init_Advanced0
;__Lib_SPI_c345.c,54 :: 		
0x04BC	0x51B8      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 0, 1
0x04BE	0x0A00      	XORLW       0
0x04C0	0xE101      	BNZ         L_SPI1_Init_Advanced1
;__Lib_SPI_c345.c,55 :: 		
0x04C2	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced1:
;__Lib_SPI_c345.c,56 :: 		
0x04C4	0xD003      	BRA         L_SPI1_Init_Advanced2
L_SPI1_Init_Advanced0:
;__Lib_SPI_c345.c,58 :: 		
0x04C6	0x53B8      	MOVF        FARG_SPI1_Init_Advanced_transmit_edge, 1, 1
0x04C8	0xE001      	BZ          L_SPI1_Init_Advanced3
;__Lib_SPI_c345.c,59 :: 		
0x04CA	0x8CC7      	BSF         SSPSTAT, 6 
L_SPI1_Init_Advanced3:
;__Lib_SPI_c345.c,60 :: 		
L_SPI1_Init_Advanced2:
;__Lib_SPI_c345.c,61 :: 		
0x04CC	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_c345.c,62 :: 		
0x04CE	0x0012      	RETURN      0
; end of _SPI1_Init_Advanced
_set_TX_power:
;sensor.c,768 :: 		void set_TX_power(unsigned short int power) {             // 0-31 possible variants
;sensor.c,769 :: 		if((power < 0) || (power > 31))
0x04D0	0x0E00      	MOVLW       0
0x04D2	0x0100      	MOVLB       0
0x04D4	0x5DB5      	SUBWF       FARG_set_TX_power_power, 0, 1
0x04D6	0xE304      	BNC         L__set_TX_power200
0x04D8	0x51B5      	MOVF        FARG_set_TX_power_power, 0, 1
0x04DA	0x081F      	SUBLW       31
0x04DC	0xE301      	BNC         L__set_TX_power200
0x04DE	0xD002      	BRA         L_set_TX_power58
L__set_TX_power200:
;sensor.c,770 :: 		power = 31;
0x04E0	0x0E1F      	MOVLW       31
0x04E2	0x6FB5      	MOVWF       FARG_set_TX_power_power, 1
L_set_TX_power58:
;sensor.c,771 :: 		power = 31 - power;                                     // 0 max, 31 min -> 31 max, 0 min
0x04E4	0x51B5      	MOVF        FARG_set_TX_power_power, 0, 1
0x04E6	0x081F      	SUBLW       31
0x04E8	0x6E00      	MOVWF       R0 
0x04EA	0xF0B5C000  	MOVFF       R0, FARG_set_TX_power_power
;sensor.c,772 :: 		power = ((power & 0b00011111) << 3) & 0b11111000;       // calculating power
0x04EE	0x0E1F      	MOVLW       31
0x04F0	0x1400      	ANDWF       R0, 0 
0x04F2	0x6E02      	MOVWF       R2 
0x04F4	0xF000C002  	MOVFF       R2, R0
0x04F8	0x3600      	RLCF        R0, 1 
0x04FA	0x9000      	BCF         R0, 0 
0x04FC	0x3600      	RLCF        R0, 1 
0x04FE	0x9000      	BCF         R0, 0 
0x0500	0x3600      	RLCF        R0, 1 
0x0502	0x9000      	BCF         R0, 0 
0x0504	0x0EF8      	MOVLW       248
0x0506	0x1600      	ANDWF       R0, 1 
0x0508	0xF0B5C000  	MOVFF       R0, FARG_set_TX_power_power
;sensor.c,773 :: 		write_ZIGBEE_long(RFCON3, power);
0x050C	0x0E03      	MOVLW       3
0x050E	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0510	0x0E02      	MOVLW       2
0x0512	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0514	0xF0BDC000  	MOVFF       R0, FARG_write_ZIGBEE_long_data_r
0x0518	0xDD93      	RCALL       _write_ZIGBEE_long
;sensor.c,774 :: 		}
0x051A	0x0012      	RETURN      0
; end of _set_TX_power
_pin_reset:
;sensor.c,381 :: 		void pin_reset() {
;sensor.c,382 :: 		RST = 0;  // activate reset
0x051C	0x928B      	BCF         LATC1_bit, 1 
;sensor.c,383 :: 		Delay_ms(5);
0x051E	0x0E11      	MOVLW       17
0x0520	0x6E0C      	MOVWF       R12, 0
0x0522	0x0E3A      	MOVLW       58
0x0524	0x6E0D      	MOVWF       R13, 0
L_pin_reset8:
0x0526	0x2E0D      	DECFSZ      R13, 1, 0
0x0528	0xD7FE      	BRA         L_pin_reset8
0x052A	0x2E0C      	DECFSZ      R12, 1, 0
0x052C	0xD7FC      	BRA         L_pin_reset8
0x052E	0x0000      	NOP
;sensor.c,384 :: 		RST = 1;  // deactivate reset
0x0530	0x828B      	BSF         LATC1_bit, 1 
;sensor.c,385 :: 		Delay_ms(5);
0x0532	0x0E11      	MOVLW       17
0x0534	0x6E0C      	MOVWF       R12, 0
0x0536	0x0E3A      	MOVLW       58
0x0538	0x6E0D      	MOVWF       R13, 0
L_pin_reset9:
0x053A	0x2E0D      	DECFSZ      R13, 1, 0
0x053C	0xD7FE      	BRA         L_pin_reset9
0x053E	0x2E0C      	DECFSZ      R12, 1, 0
0x0540	0xD7FC      	BRA         L_pin_reset9
0x0542	0x0000      	NOP
;sensor.c,386 :: 		}
0x0544	0x0012      	RETURN      0
; end of _pin_reset
_set_reception_mode:
;sensor.c,632 :: 		void set_reception_mode(short int r_mode) { // 1 normal, 2 error, 3 promiscuous mode
;sensor.c,635 :: 		switch(r_mode) {
0x0546	0xD020      	BRA         L_set_reception_mode41
;sensor.c,636 :: 		case 1: {
L_set_reception_mode43:
;sensor.c,637 :: 		temp = read_ZIGBEE_short(RXMCR);      // normal mode
0x0548	0x0100      	MOVLB       0
0x054A	0x6BBB      	CLRF        FARG_read_ZIGBEE_short_address, 1
0x054C	0xDDB7      	RCALL       _read_ZIGBEE_short
;sensor.c,638 :: 		temp = temp & (!0x03);                // mask for normal mode
0x054E	0x0E00      	MOVLW       0
0x0550	0x1400      	ANDWF       R0, 0 
0x0552	0x0100      	MOVLB       0
0x0554	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,639 :: 		write_ZIGBEE_short(RXMCR, temp);
0x0556	0x6BBB      	CLRF        FARG_write_ZIGBEE_short_address, 1
0x0558	0xDD9F      	RCALL       _write_ZIGBEE_short
;sensor.c,641 :: 		break;
0x055A	0xD020      	BRA         L_set_reception_mode42
;sensor.c,643 :: 		case 2: {
L_set_reception_mode44:
;sensor.c,644 :: 		temp = read_ZIGBEE_short(RXMCR);      // error mode
0x055C	0x0100      	MOVLB       0
0x055E	0x6BBB      	CLRF        FARG_read_ZIGBEE_short_address, 1
0x0560	0xDDAD      	RCALL       _read_ZIGBEE_short
;sensor.c,645 :: 		temp = temp & (!0x01);                // mask for error mode
0x0562	0x0E00      	MOVLW       0
0x0564	0x1400      	ANDWF       R0, 0 
0x0566	0x0100      	MOVLB       0
0x0568	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,646 :: 		temp = temp | 0x02;                   // mask for error mode
0x056A	0x83BC      	BSF         FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,647 :: 		write_ZIGBEE_short(RXMCR, temp);
0x056C	0x6BBB      	CLRF        FARG_write_ZIGBEE_short_address, 1
0x056E	0xDD94      	RCALL       _write_ZIGBEE_short
;sensor.c,649 :: 		break;
0x0570	0xD015      	BRA         L_set_reception_mode42
;sensor.c,651 :: 		case 3: {
L_set_reception_mode45:
;sensor.c,652 :: 		temp = read_ZIGBEE_short(RXMCR);      // promiscuous mode
0x0572	0x0100      	MOVLB       0
0x0574	0x6BBB      	CLRF        FARG_read_ZIGBEE_short_address, 1
0x0576	0xDDA2      	RCALL       _read_ZIGBEE_short
;sensor.c,653 :: 		temp = temp & (!0x02);                // mask for promiscuous mode
0x0578	0x0E00      	MOVLW       0
0x057A	0x1400      	ANDWF       R0, 0 
0x057C	0x0100      	MOVLB       0
0x057E	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,654 :: 		temp = temp | 0x01;                   // mask for promiscuous mode
0x0580	0x81BC      	BSF         FARG_write_ZIGBEE_short_data_r, 0, 1
;sensor.c,655 :: 		write_ZIGBEE_short(RXMCR, temp);
0x0582	0x6BBB      	CLRF        FARG_write_ZIGBEE_short_address, 1
0x0584	0xDD89      	RCALL       _write_ZIGBEE_short
;sensor.c,657 :: 		break;
0x0586	0xD00A      	BRA         L_set_reception_mode42
;sensor.c,658 :: 		}
L_set_reception_mode41:
0x0588	0x0100      	MOVLB       0
0x058A	0x51B5      	MOVF        FARG_set_reception_mode_r_mode, 0, 1
0x058C	0x0A01      	XORLW       1
0x058E	0xE0DC      	BZ          L_set_reception_mode43
0x0590	0x51B5      	MOVF        FARG_set_reception_mode_r_mode, 0, 1
0x0592	0x0A02      	XORLW       2
0x0594	0xE0E3      	BZ          L_set_reception_mode44
0x0596	0x51B5      	MOVF        FARG_set_reception_mode_r_mode, 0, 1
0x0598	0x0A03      	XORLW       3
0x059A	0xE0EB      	BZ          L_set_reception_mode45
L_set_reception_mode42:
;sensor.c,659 :: 		}
0x059C	0x0012      	RETURN      0
; end of _set_reception_mode
_pin_wake:
;sensor.c,749 :: 		void pin_wake() {
;sensor.c,750 :: 		WAKE = 1;
0x059E	0x848B      	BSF         LATC2_bit, 2 
;sensor.c,751 :: 		Delay_ms(5);
0x05A0	0x0E11      	MOVLW       17
0x05A2	0x6E0C      	MOVWF       R12, 0
0x05A4	0x0E3A      	MOVLW       58
0x05A6	0x6E0D      	MOVWF       R13, 0
L_pin_wake55:
0x05A8	0x2E0D      	DECFSZ      R13, 1, 0
0x05AA	0xD7FE      	BRA         L_pin_wake55
0x05AC	0x2E0C      	DECFSZ      R12, 1, 0
0x05AE	0xD7FC      	BRA         L_pin_wake55
0x05B0	0x0000      	NOP
;sensor.c,752 :: 		}
0x05B2	0x0012      	RETURN      0
; end of _pin_wake
_read_ZIGBEE_long:
0x05B4	0x0100      	MOVLB       0
0x05B6	0x6BB7      	CLRF        read_ZIGBEE_long_address_low_L0, 1
0x05B8	0x6BB8      	CLRF        read_ZIGBEE_long_dummy_data_r_L0, 1
;sensor.c,222 :: 		short int read_ZIGBEE_long(int address) {
;sensor.c,226 :: 		CS2 = 0;
0x05BA	0x908B      	BCF         LATC0_bit, 0 
;sensor.c,228 :: 		address_high = ((short int)(address >> 3) & 0b01111111) | 0x80;  //calculating addressing mode
0x05BC	0x0E03      	MOVLW       3
0x05BE	0x6E02      	MOVWF       R2 
0x05C0	0xF000C0B5  	MOVFF       FARG_read_ZIGBEE_long_address, R0
0x05C4	0xF001C0B6  	MOVFF       FARG_read_ZIGBEE_long_address+1, R1
0x05C8	0x5002      	MOVF        R2, 0 
L__read_ZIGBEE_long220:
0x05CA	0xE007      	BZ          L__read_ZIGBEE_long221
0x05CC	0x3201      	RRCF        R1, 1 
0x05CE	0x3200      	RRCF        R0, 1 
0x05D0	0x9E01      	BCF         R1, 7 
0x05D2	0xBC01      	BTFSC       R1, 6 
0x05D4	0x8E01      	BSF         R1, 7 
0x05D6	0x0FFF      	ADDLW       255
0x05D8	0xD7F8      	BRA         L__read_ZIGBEE_long220
L__read_ZIGBEE_long221:
0x05DA	0x0E7F      	MOVLW       127
0x05DC	0x1400      	ANDWF       R0, 0 
0x05DE	0x6FBF      	MOVWF       FARG_SPI1_Write_data_, 1
0x05E0	0x8FBF      	BSF         FARG_SPI1_Write_data_, 7, 1
;sensor.c,229 :: 		address_low  = ((short int)(address << 5) & 0b11100000);         //calculating addressing mode
0x05E2	0x0E05      	MOVLW       5
0x05E4	0x6E00      	MOVWF       R0 
0x05E6	0xF0B7C0B5  	MOVFF       FARG_read_ZIGBEE_long_address, read_ZIGBEE_long_address_low_L0
0x05EA	0x5000      	MOVF        R0, 0 
L__read_ZIGBEE_long222:
0x05EC	0xE004      	BZ          L__read_ZIGBEE_long223
0x05EE	0x37B7      	RLCF        read_ZIGBEE_long_address_low_L0, 1, 1
0x05F0	0x91B7      	BCF         read_ZIGBEE_long_address_low_L0, 0, 1
0x05F2	0x0FFF      	ADDLW       255
0x05F4	0xD7FB      	BRA         L__read_ZIGBEE_long222
L__read_ZIGBEE_long223:
0x05F6	0x0EE0      	MOVLW       224
0x05F8	0x17B7      	ANDWF       read_ZIGBEE_long_address_low_L0, 1, 1
;sensor.c,230 :: 		SPI1_Write(address_high);            // addressing register
0x05FA	0xDD10      	RCALL       _SPI1_Write
;sensor.c,231 :: 		SPI1_Write(address_low);             // addressing register
0x05FC	0xF0BFC0B7  	MOVFF       read_ZIGBEE_long_address_low_L0, FARG_SPI1_Write_data_
0x0600	0xDD0D      	RCALL       _SPI1_Write
;sensor.c,232 :: 		data_r = SPI1_Read(dummy_data_r);    // read data from register
0x0602	0xF0BFC0B8  	MOVFF       read_ZIGBEE_long_dummy_data_r_L0, FARG_SPI1_Read_buffer
0x0606	0xDD13      	RCALL       _SPI1_Read
;sensor.c,234 :: 		CS2 = 1;
0x0608	0x808B      	BSF         LATC0_bit, 0 
;sensor.c,235 :: 		return data_r;
;sensor.c,236 :: 		}
0x060A	0x0012      	RETURN      0
; end of _read_ZIGBEE_long
_start_transmit:
;sensor.c,241 :: 		void start_transmit() {
;sensor.c,246 :: 		write_ZIGBEE_short(TXNCON, 0b00000101);
0x060C	0x0E1B      	MOVLW       27
0x060E	0x0100      	MOVLB       0
0x0610	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0612	0x0E05      	MOVLW       5
0x0614	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x0616	0xDD40      	RCALL       _write_ZIGBEE_short
;sensor.c,247 :: 		}
0x0618	0x0012      	RETURN      0
; end of _start_transmit
_set_wake_from_pin:
;sensor.c,736 :: 		void set_wake_from_pin() {
;sensor.c,739 :: 		WAKE = 0;
0x061A	0x948B      	BCF         LATC2_bit, 2 
;sensor.c,740 :: 		temp = read_ZIGBEE_short(RXFLUSH);
0x061C	0x0E0D      	MOVLW       13
0x061E	0x0100      	MOVLB       0
0x0620	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0622	0xDD4C      	RCALL       _read_ZIGBEE_short
;sensor.c,741 :: 		temp = temp | 0x60;                     // mask
0x0624	0x0E60      	MOVLW       96
0x0626	0x1000      	IORWF       R0, 0 
0x0628	0x0100      	MOVLB       0
0x062A	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,742 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x062C	0x0E0D      	MOVLW       13
0x062E	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0630	0xDD33      	RCALL       _write_ZIGBEE_short
;sensor.c,744 :: 		temp = read_ZIGBEE_short(WAKECON);
0x0632	0x0E22      	MOVLW       34
0x0634	0x0100      	MOVLB       0
0x0636	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0638	0xDD41      	RCALL       _read_ZIGBEE_short
;sensor.c,745 :: 		temp = temp | 0x80;
0x063A	0x0E80      	MOVLW       128
0x063C	0x1000      	IORWF       R0, 0 
0x063E	0x0100      	MOVLB       0
0x0640	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,746 :: 		write_ZIGBEE_short(WAKECON, temp);
0x0642	0x0E22      	MOVLW       34
0x0644	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0646	0xDD28      	RCALL       _write_ZIGBEE_short
;sensor.c,747 :: 		}
0x0648	0x0012      	RETURN      0
; end of _set_wake_from_pin
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x064A	0x9296      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x064C	0x9496      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x064E	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x0650	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x0652	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x0654	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x0656	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x0658	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x065A	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x065C	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x065E	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x0660	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x0662	0xDE59      	RCALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x0664	0xDE58      	RCALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x0666	0xDE57      	RCALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x0668	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x066A	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x066C	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x066E	0xDE50      	RCALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x0670	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x0672	0xDE51      	RCALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x0674	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x0676	0xDE4C      	RCALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x0678	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x067A	0xDE4D      	RCALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x067C	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x067E	0xDE48      	RCALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x0680	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x0682	0xDE49      	RCALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x0684	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x0686	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x0688	0xDE43      	RCALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x068A	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x068C	0xDE44      	RCALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x068E	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x0690	0xDE3F      	RCALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x0692	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x0694	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x0696	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x0698	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x069A	0xDE3A      	RCALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x069C	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x069E	0xDE3B      	RCALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x06A0	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x06A2	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x06A4	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x06A6	0xDE34      	RCALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x06A8	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x06AA	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x06AC	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x06AE	0xDE30      	RCALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x06B0	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x06B2	0xDE31      	RCALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x06B4	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x06B6	0xDE2C      	RCALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x06B8	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x06BA	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x06BC	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x06BE	0xDE28      	RCALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x06C0	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x06C2	0xDE29      	RCALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x06C4	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x06C6	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x06C8	0xDE23      	RCALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x06CA	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x06CC	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x06CE	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x06D0	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x06D2	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x06D4	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x06D6	0xDE1C      	RCALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x06D8	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x06DA	0xDE1D      	RCALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x06DC	0x0100      	MOVLB       0
0x06DE	0x8192      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,182 :: 		
0x06E0	0x0012      	RETURN      0
; end of _Lcd_Init
_software_reset:
;sensor.c,400 :: 		void software_reset() {                // PWR_reset,BB_reset and MAC_reset at once
;sensor.c,401 :: 		write_ZIGBEE_short(SOFTRST, 0x07);
0x06E2	0x0E2A      	MOVLW       42
0x06E4	0x0100      	MOVLB       0
0x06E6	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x06E8	0x0E07      	MOVLW       7
0x06EA	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x06EC	0xDCD5      	RCALL       _write_ZIGBEE_short
;sensor.c,402 :: 		}
0x06EE	0x0012      	RETURN      0
; end of _software_reset
_set_PAN_ID:
;sensor.c,728 :: 		void set_PAN_ID(short int * address) {
;sensor.c,729 :: 		write_ZIGBEE_short(PANIDL, address[0]);
0x06F0	0x0E01      	MOVLW       1
0x06F2	0x0100      	MOVLB       0
0x06F4	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x06F6	0xFFE9C0B5  	MOVFF       FARG_set_PAN_ID_address, FSR0L
0x06FA	0xFFEAC0B6  	MOVFF       FARG_set_PAN_ID_address+1, FSR0H
0x06FE	0xF0BCCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_short_data_r
0x0702	0xDCCA      	RCALL       _write_ZIGBEE_short
;sensor.c,730 :: 		write_ZIGBEE_short(PANIDH, address[1]);
0x0704	0x0E02      	MOVLW       2
0x0706	0x0100      	MOVLB       0
0x0708	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x070A	0x0E01      	MOVLW       1
0x070C	0x25B5      	ADDWF       FARG_set_PAN_ID_address, 0, 1
0x070E	0x6EE9      	MOVWF       FSR0L 
0x0710	0x0E00      	MOVLW       0
0x0712	0x21B6      	ADDWFC      FARG_set_PAN_ID_address+1, 0, 1
0x0714	0x6EEA      	MOVWF       FSR0H 
0x0716	0xF0BCCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_short_data_r
0x071A	0xDCBE      	RCALL       _write_ZIGBEE_short
;sensor.c,731 :: 		}
0x071C	0x0012      	RETURN      0
; end of _set_PAN_ID
_set_long_address:
0x071E	0x0100      	MOVLB       0
0x0720	0x6BB7      	CLRF        set_long_address_i_L0, 1
;sensor.c,720 :: 		void set_long_address(short int * address) {
;sensor.c,723 :: 		for(i = 0; i < 8; i++) {
0x0722	0x6BB7      	CLRF        set_long_address_i_L0, 1
L_set_long_address52:
0x0724	0x0E80      	MOVLW       128
0x0726	0x19B7      	XORWF       set_long_address_i_L0, 0, 1
0x0728	0x6E00      	MOVWF       R0 
0x072A	0x0E80      	MOVLW       128
0x072C	0x0A08      	XORLW       8
0x072E	0x5C00      	SUBWF       R0, 0 
0x0730	0xE211      	BC          L_set_long_address53
;sensor.c,724 :: 		write_ZIGBEE_short(EADR0 + i, address[i]);   // 0x05 address of EADR0
0x0732	0x51B7      	MOVF        set_long_address_i_L0, 0, 1
0x0734	0x0F05      	ADDLW       5
0x0736	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0738	0x51B7      	MOVF        set_long_address_i_L0, 0, 1
0x073A	0x25B5      	ADDWF       FARG_set_long_address_address, 0, 1
0x073C	0x6EE9      	MOVWF       FSR0L 
0x073E	0x0E00      	MOVLW       0
0x0740	0xBFB7      	BTFSC       set_long_address_i_L0, 7, 1
0x0742	0x0EFF      	MOVLW       255
0x0744	0x21B6      	ADDWFC      FARG_set_long_address_address+1, 0, 1
0x0746	0x6EEA      	MOVWF       FSR0H 
0x0748	0xF0BCCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_short_data_r
0x074C	0xDCA5      	RCALL       _write_ZIGBEE_short
;sensor.c,723 :: 		for(i = 0; i < 8; i++) {
0x074E	0x0100      	MOVLB       0
0x0750	0x2BB7      	INCF        set_long_address_i_L0, 1, 1
;sensor.c,725 :: 		}
0x0752	0xD7E8      	BRA         L_set_long_address52
L_set_long_address53:
;sensor.c,726 :: 		}
0x0754	0x0012      	RETURN      0
; end of _set_long_address
_nonbeacon_PAN_coordinator_device:
;sensor.c,546 :: 		void nonbeacon_PAN_coordinator_device() {
;sensor.c,549 :: 		temp = read_ZIGBEE_short(RXMCR);
0x0756	0x0100      	MOVLB       0
0x0758	0x6BBB      	CLRF        FARG_read_ZIGBEE_short_address, 1
0x075A	0xDCB0      	RCALL       _read_ZIGBEE_short
;sensor.c,550 :: 		temp = temp | 0x08;                 // 0x08 mask for PAN coordinator
0x075C	0x0E08      	MOVLW       8
0x075E	0x1000      	IORWF       R0, 0 
0x0760	0x0100      	MOVLB       0
0x0762	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,551 :: 		write_ZIGBEE_short(RXMCR, temp);
0x0764	0x6BBB      	CLRF        FARG_write_ZIGBEE_short_address, 1
0x0766	0xDC98      	RCALL       _write_ZIGBEE_short
;sensor.c,553 :: 		temp = read_ZIGBEE_short(TXMCR);
0x0768	0x0E11      	MOVLW       17
0x076A	0x0100      	MOVLB       0
0x076C	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x076E	0xDCA6      	RCALL       _read_ZIGBEE_short
;sensor.c,554 :: 		temp = temp & 0xDF;                 // 0xDF mask for CSMA-CA mode
0x0770	0x0EDF      	MOVLW       223
0x0772	0x1400      	ANDWF       R0, 0 
0x0774	0x0100      	MOVLB       0
0x0776	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,555 :: 		write_ZIGBEE_short(TXMCR, temp);
0x0778	0x0E11      	MOVLW       17
0x077A	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x077C	0xDC8D      	RCALL       _write_ZIGBEE_short
;sensor.c,557 :: 		write_ZIGBEE_short(ORDER, 0xFF);    // BO, SO are 15
0x077E	0x0E10      	MOVLW       16
0x0780	0x0100      	MOVLB       0
0x0782	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0784	0x0EFF      	MOVLW       255
0x0786	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x0788	0xDC87      	RCALL       _write_ZIGBEE_short
;sensor.c,558 :: 		}
0x078A	0x0012      	RETURN      0
; end of _nonbeacon_PAN_coordinator_device
_set_frame_format_filter:
;sensor.c,664 :: 		void set_frame_format_filter(short int fff_mode) {   // 1 all frames, 2 command only, 3 data only, 4 beacon only
;sensor.c,667 :: 		switch(fff_mode) {
0x078C	0xD033      	BRA         L_set_frame_format_filter46
;sensor.c,668 :: 		case 1: {
L_set_frame_format_filter48:
;sensor.c,669 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // all frames
0x078E	0x0E0D      	MOVLW       13
0x0790	0x0100      	MOVLB       0
0x0792	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0794	0xDC93      	RCALL       _read_ZIGBEE_short
;sensor.c,670 :: 		temp = temp & (!0x0E);                  // mask for all frames
0x0796	0x0E00      	MOVLW       0
0x0798	0x1400      	ANDWF       R0, 0 
0x079A	0x0100      	MOVLB       0
0x079C	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,671 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x079E	0x0E0D      	MOVLW       13
0x07A0	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x07A2	0xDC7A      	RCALL       _write_ZIGBEE_short
;sensor.c,673 :: 		break;
0x07A4	0xD034      	BRA         L_set_frame_format_filter47
;sensor.c,675 :: 		case 2: {
L_set_frame_format_filter49:
;sensor.c,676 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // command only
0x07A6	0x0E0D      	MOVLW       13
0x07A8	0x0100      	MOVLB       0
0x07AA	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x07AC	0xDC87      	RCALL       _read_ZIGBEE_short
;sensor.c,677 :: 		temp = temp & (!0x06);                  // mask for command only
0x07AE	0x0E00      	MOVLW       0
0x07B0	0x1400      	ANDWF       R0, 0 
0x07B2	0x0100      	MOVLB       0
0x07B4	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,678 :: 		temp = temp | 0x08;                     // mask for command only
0x07B6	0x87BC      	BSF         FARG_write_ZIGBEE_short_data_r, 3, 1
;sensor.c,679 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x07B8	0x0E0D      	MOVLW       13
0x07BA	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x07BC	0xDC6D      	RCALL       _write_ZIGBEE_short
;sensor.c,681 :: 		break;
0x07BE	0xD027      	BRA         L_set_frame_format_filter47
;sensor.c,683 :: 		case 3: {
L_set_frame_format_filter50:
;sensor.c,684 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // data only
0x07C0	0x0E0D      	MOVLW       13
0x07C2	0x0100      	MOVLB       0
0x07C4	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x07C6	0xDC7A      	RCALL       _read_ZIGBEE_short
;sensor.c,685 :: 		temp = temp & (!0x0A);                  // mask for data only
0x07C8	0x0E00      	MOVLW       0
0x07CA	0x1400      	ANDWF       R0, 0 
0x07CC	0x0100      	MOVLB       0
0x07CE	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,686 :: 		temp = temp | 0x04;                     // mask for data only
0x07D0	0x85BC      	BSF         FARG_write_ZIGBEE_short_data_r, 2, 1
;sensor.c,687 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x07D2	0x0E0D      	MOVLW       13
0x07D4	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x07D6	0xDC60      	RCALL       _write_ZIGBEE_short
;sensor.c,689 :: 		break;
0x07D8	0xD01A      	BRA         L_set_frame_format_filter47
;sensor.c,691 :: 		case 4: {
L_set_frame_format_filter51:
;sensor.c,692 :: 		temp = read_ZIGBEE_short(RXFLUSH);      // beacon only
0x07DA	0x0E0D      	MOVLW       13
0x07DC	0x0100      	MOVLB       0
0x07DE	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x07E0	0xDC6D      	RCALL       _read_ZIGBEE_short
;sensor.c,693 :: 		temp = temp & (!0x0C);                  // mask for beacon only
0x07E2	0x0E00      	MOVLW       0
0x07E4	0x1400      	ANDWF       R0, 0 
0x07E6	0x0100      	MOVLB       0
0x07E8	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,694 :: 		temp = temp | 0x02;                     // mask for beacon only
0x07EA	0x83BC      	BSF         FARG_write_ZIGBEE_short_data_r, 1, 1
;sensor.c,695 :: 		write_ZIGBEE_short(RXFLUSH, temp);
0x07EC	0x0E0D      	MOVLW       13
0x07EE	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x07F0	0xDC53      	RCALL       _write_ZIGBEE_short
;sensor.c,697 :: 		break;
0x07F2	0xD00D      	BRA         L_set_frame_format_filter47
;sensor.c,698 :: 		}
L_set_frame_format_filter46:
0x07F4	0x0100      	MOVLB       0
0x07F6	0x51B5      	MOVF        FARG_set_frame_format_filter_fff_mode, 0, 1
0x07F8	0x0A01      	XORLW       1
0x07FA	0xE0C9      	BZ          L_set_frame_format_filter48
0x07FC	0x51B5      	MOVF        FARG_set_frame_format_filter_fff_mode, 0, 1
0x07FE	0x0A02      	XORLW       2
0x0800	0xE0D2      	BZ          L_set_frame_format_filter49
0x0802	0x51B5      	MOVF        FARG_set_frame_format_filter_fff_mode, 0, 1
0x0804	0x0A03      	XORLW       3
0x0806	0xE0DC      	BZ          L_set_frame_format_filter50
0x0808	0x51B5      	MOVF        FARG_set_frame_format_filter_fff_mode, 0, 1
0x080A	0x0A04      	XORLW       4
0x080C	0xE0E6      	BZ          L_set_frame_format_filter51
L_set_frame_format_filter47:
;sensor.c,699 :: 		}
0x080E	0x0012      	RETURN      0
; end of _set_frame_format_filter
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x0810	0x0100      	MOVLB       0
0x0812	0xBFB5      	BTFSC       FARG_Lcd_Cmd_out_char, 7, 1
0x0814	0xD002      	BRA         L__Lcd_Cmd20
0x0816	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x0818	0xD001      	BRA         L__Lcd_Cmd21
L__Lcd_Cmd20:
0x081A	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd21:
;__Lib_Lcd.c,21 :: 		
0x081C	0xBDB5      	BTFSC       FARG_Lcd_Cmd_out_char, 6, 1
0x081E	0xD002      	BRA         L__Lcd_Cmd22
0x0820	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x0822	0xD001      	BRA         L__Lcd_Cmd23
L__Lcd_Cmd22:
0x0824	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd23:
;__Lib_Lcd.c,22 :: 		
0x0826	0xBBB5      	BTFSC       FARG_Lcd_Cmd_out_char, 5, 1
0x0828	0xD002      	BRA         L__Lcd_Cmd24
0x082A	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x082C	0xD001      	BRA         L__Lcd_Cmd25
L__Lcd_Cmd24:
0x082E	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd25:
;__Lib_Lcd.c,23 :: 		
0x0830	0xB9B5      	BTFSC       FARG_Lcd_Cmd_out_char, 4, 1
0x0832	0xD002      	BRA         L__Lcd_Cmd26
0x0834	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x0836	0xD001      	BRA         L__Lcd_Cmd27
L__Lcd_Cmd26:
0x0838	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd27:
;__Lib_Lcd.c,25 :: 		
0x083A	0xB192      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x083C	0xD002      	BRA         L__Lcd_Cmd28
0x083E	0x8484      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0840	0xD001      	BRA         L__Lcd_Cmd29
L__Lcd_Cmd28:
0x0842	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd29:
;__Lib_Lcd.c,28 :: 		
0x0844	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x0846	0xDD64      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x0848	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x084A	0xB7B5      	BTFSC       FARG_Lcd_Cmd_out_char, 3, 1
0x084C	0xD002      	BRA         L__Lcd_Cmd30
0x084E	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x0850	0xD001      	BRA         L__Lcd_Cmd31
L__Lcd_Cmd30:
0x0852	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd31:
;__Lib_Lcd.c,34 :: 		
0x0854	0xB5B5      	BTFSC       FARG_Lcd_Cmd_out_char, 2, 1
0x0856	0xD002      	BRA         L__Lcd_Cmd32
0x0858	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x085A	0xD001      	BRA         L__Lcd_Cmd33
L__Lcd_Cmd32:
0x085C	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd33:
;__Lib_Lcd.c,35 :: 		
0x085E	0xB3B5      	BTFSC       FARG_Lcd_Cmd_out_char, 1, 1
0x0860	0xD002      	BRA         L__Lcd_Cmd34
0x0862	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x0864	0xD001      	BRA         L__Lcd_Cmd35
L__Lcd_Cmd34:
0x0866	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd35:
;__Lib_Lcd.c,36 :: 		
0x0868	0xB1B5      	BTFSC       FARG_Lcd_Cmd_out_char, 0, 1
0x086A	0xD002      	BRA         L__Lcd_Cmd36
0x086C	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x086E	0xD001      	BRA         L__Lcd_Cmd37
L__Lcd_Cmd36:
0x0870	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd37:
;__Lib_Lcd.c,38 :: 		
0x0872	0xB192      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0874	0xD002      	BRA         L__Lcd_Cmd38
0x0876	0x8484      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0878	0xD001      	BRA         L__Lcd_Cmd39
L__Lcd_Cmd38:
0x087A	0x9484      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd39:
;__Lib_Lcd.c,40 :: 		
0x087C	0x8284      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x087E	0xDD48      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x0880	0x9284      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x0882	0xA192      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
0x0884	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x0886	0xDD47      	RCALL       _Delay_5500us
0x0888	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x088A	0xDD3C      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
0x088C	0x0012      	RETURN      0
; end of _Lcd_Cmd
_init_ZIGBEE_nonbeacon:
;sensor.c,790 :: 		void init_ZIGBEE_nonbeacon() {
;sensor.c,791 :: 		init_ZIGBEE_basic();
0x088E	0xDDC3      	RCALL       _init_ZIGBEE_basic
;sensor.c,792 :: 		set_CCA_mode(1);     // Set CCA mode to ED and set threshold
0x0890	0x0E01      	MOVLW       1
0x0892	0x0100      	MOVLB       0
0x0894	0x6FB9      	MOVWF       FARG_set_CCA_mode_CCA_mode, 1
0x0896	0xDD65      	RCALL       _set_CCA_mode
;sensor.c,793 :: 		set_RSSI_mode(2);    // RSSI2 mode
0x0898	0x0E02      	MOVLW       2
0x089A	0x0100      	MOVLB       0
0x089C	0x6FB9      	MOVWF       FARG_set_RSSI_mode_RSSI_mode, 1
0x089E	0xDD45      	RCALL       _set_RSSI_mode
;sensor.c,794 :: 		enable_interrupt();  // Enables all interrupts
0x08A0	0xDC4F      	RCALL       _enable_interrupt
;sensor.c,795 :: 		set_channel(11);     // Channel 11
0x08A2	0x0E0B      	MOVLW       11
0x08A4	0x0100      	MOVLB       0
0x08A6	0x6FB9      	MOVWF       FARG_set_channel_channel_number, 1
0x08A8	0xDC51      	RCALL       _set_channel
;sensor.c,796 :: 		RF_reset();
0x08AA	0xDC1B      	RCALL       _RF_reset
;sensor.c,797 :: 		}
0x08AC	0x0012      	RETURN      0
; end of _init_ZIGBEE_nonbeacon
_set_short_address:
;sensor.c,715 :: 		void set_short_address(short int * address) {
;sensor.c,716 :: 		write_ZIGBEE_short(SADRL, address[0]);
0x08AE	0x0E03      	MOVLW       3
0x08B0	0x0100      	MOVLB       0
0x08B2	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x08B4	0xFFE9C0B5  	MOVFF       FARG_set_short_address_address, FSR0L
0x08B8	0xFFEAC0B6  	MOVFF       FARG_set_short_address_address+1, FSR0H
0x08BC	0xF0BCCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_short_data_r
0x08C0	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,717 :: 		write_ZIGBEE_short(SADRH, address[1]);
0x08C4	0x0E04      	MOVLW       4
0x08C6	0x0100      	MOVLB       0
0x08C8	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x08CA	0x0E01      	MOVLW       1
0x08CC	0x25B5      	ADDWF       FARG_set_short_address_address, 0, 1
0x08CE	0x6EE9      	MOVWF       FSR0L 
0x08D0	0x0E00      	MOVLW       0
0x08D2	0x21B6      	ADDWFC      FARG_set_short_address_address+1, 0, 1
0x08D4	0x6EEA      	MOVWF       FSR0H 
0x08D6	0xF0BCCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_short_data_r
0x08DA	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,718 :: 		}
0x08DE	0x0012      	RETURN      0
; end of _set_short_address
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x08E0	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x08E2	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x08E6	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x08E8	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x08EA	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x08EC	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
0x08EE	0x0012      	RETURN      0
; end of ___CC2DW
_PWR_reset:
;sensor.c,388 :: 		void PWR_reset() {
;sensor.c,389 :: 		write_ZIGBEE_short(SOFTRST, 0x04);   // 0x04  mask for RSTPWR bit
0x08F0	0x0E2A      	MOVLW       42
0x08F2	0x0100      	MOVLB       0
0x08F4	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x08F6	0x0E04      	MOVLW       4
0x08F8	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x08FA	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,390 :: 		}
0x08FE	0x0012      	RETURN      0
; end of _PWR_reset
_Initialize:
0x0900	0x0100      	MOVLB       0
0x0902	0x6BB1      	CLRF        Initialize_i_L0, 1
;sensor.c,1045 :: 		void Initialize() {
;sensor.c,1048 :: 		LQI = 0;
0x0904	0x6B89      	CLRF        _LQI, 1
;sensor.c,1049 :: 		RSSI2 = 0;
0x0906	0x6A5B      	CLRF        _RSSI2 
;sensor.c,1051 :: 		lost_data = 0;
0x0908	0x6A3A      	CLRF        _lost_data 
;sensor.c,1052 :: 		address_RX_FIFO = 0x300;
0x090A	0x0E00      	MOVLW       0
0x090C	0x6E38      	MOVWF       _address_RX_FIFO 
0x090E	0x0E03      	MOVLW       3
0x0910	0x6E39      	MOVWF       _address_RX_FIFO+1 
;sensor.c,1053 :: 		address_TX_normal_FIFO = 0;
0x0912	0x6A36      	CLRF        _address_TX_normal_FIFO 
0x0914	0x6A37      	CLRF        _address_TX_normal_FIFO+1 
;sensor.c,1055 :: 		for (i = 0; i < 2; i++) {
0x0916	0x6BB1      	CLRF        Initialize_i_L0, 1
L_Initialize177:
0x0918	0x0E80      	MOVLW       128
0x091A	0x19B1      	XORWF       Initialize_i_L0, 0, 1
0x091C	0x6E00      	MOVWF       R0 
0x091E	0x0E80      	MOVLW       128
0x0920	0x0A02      	XORLW       2
0x0922	0x5C00      	SUBWF       R0, 0 
0x0924	0xE232      	BC          L_Initialize178
;sensor.c,1056 :: 		ADDRESS_short_1[i] = 1;
0x0926	0x0E1F      	MOVLW       _ADDRESS_short_1
0x0928	0x6EE1      	MOVWF       FSR1L 
0x092A	0x0E00      	MOVLW       hi_addr(_ADDRESS_short_1)
0x092C	0x6EE2      	MOVWF       FSR1H 
0x092E	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x0930	0x26E1      	ADDWF       FSR1L, 1 
0x0932	0x0E00      	MOVLW       0
0x0934	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x0936	0x0EFF      	MOVLW       255
0x0938	0x22E2      	ADDWFC      FSR1H, 1 
0x093A	0x0E01      	MOVLW       1
0x093C	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1057 :: 		ADDRESS_short_2[i] = 2;
0x093E	0x0E23      	MOVLW       _ADDRESS_short_2
0x0940	0x6EE1      	MOVWF       FSR1L 
0x0942	0x0E00      	MOVLW       hi_addr(_ADDRESS_short_2)
0x0944	0x6EE2      	MOVWF       FSR1H 
0x0946	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x0948	0x26E1      	ADDWF       FSR1L, 1 
0x094A	0x0E00      	MOVLW       0
0x094C	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x094E	0x0EFF      	MOVLW       255
0x0950	0x22E2      	ADDWFC      FSR1H, 1 
0x0952	0x0E02      	MOVLW       2
0x0954	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1058 :: 		PAN_ID_1[i] = 3;
0x0956	0x0E1D      	MOVLW       _PAN_ID_1
0x0958	0x6EE1      	MOVWF       FSR1L 
0x095A	0x0E00      	MOVLW       hi_addr(_PAN_ID_1)
0x095C	0x6EE2      	MOVWF       FSR1H 
0x095E	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x0960	0x26E1      	ADDWF       FSR1L, 1 
0x0962	0x0E00      	MOVLW       0
0x0964	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x0966	0x0EFF      	MOVLW       255
0x0968	0x22E2      	ADDWFC      FSR1H, 1 
0x096A	0x0E03      	MOVLW       3
0x096C	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1059 :: 		PAN_ID_2[i] = 3;
0x096E	0x0E21      	MOVLW       _PAN_ID_2
0x0970	0x6EE1      	MOVWF       FSR1L 
0x0972	0x0E00      	MOVLW       hi_addr(_PAN_ID_2)
0x0974	0x6EE2      	MOVWF       FSR1H 
0x0976	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x0978	0x26E1      	ADDWF       FSR1L, 1 
0x097A	0x0E00      	MOVLW       0
0x097C	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x097E	0x0EFF      	MOVLW       255
0x0980	0x22E2      	ADDWFC      FSR1H, 1 
0x0982	0x0E03      	MOVLW       3
0x0984	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1055 :: 		for (i = 0; i < 2; i++) {
0x0986	0x2BB1      	INCF        Initialize_i_L0, 1, 1
;sensor.c,1060 :: 		}
0x0988	0xD7C7      	BRA         L_Initialize177
L_Initialize178:
;sensor.c,1062 :: 		for (i = 0; i < 8; i++) {
0x098A	0x6BB1      	CLRF        Initialize_i_L0, 1
L_Initialize180:
0x098C	0x0E80      	MOVLW       128
0x098E	0x19B1      	XORWF       Initialize_i_L0, 0, 1
0x0990	0x6E00      	MOVWF       R0 
0x0992	0x0E80      	MOVLW       128
0x0994	0x0A08      	XORLW       8
0x0996	0x5C00      	SUBWF       R0, 0 
0x0998	0xE21A      	BC          L_Initialize181
;sensor.c,1063 :: 		ADDRESS_long_1[i] = 1;
0x099A	0x0E93      	MOVLW       _ADDRESS_long_1
0x099C	0x6EE1      	MOVWF       FSR1L 
0x099E	0x0E00      	MOVLW       hi_addr(_ADDRESS_long_1)
0x09A0	0x6EE2      	MOVWF       FSR1H 
0x09A2	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x09A4	0x26E1      	ADDWF       FSR1L, 1 
0x09A6	0x0E00      	MOVLW       0
0x09A8	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x09AA	0x0EFF      	MOVLW       255
0x09AC	0x22E2      	ADDWFC      FSR1H, 1 
0x09AE	0x0E01      	MOVLW       1
0x09B0	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1064 :: 		ADDRESS_long_2[i] = 2;
0x09B2	0x0E9B      	MOVLW       _ADDRESS_long_2
0x09B4	0x6EE1      	MOVWF       FSR1L 
0x09B6	0x0E00      	MOVLW       hi_addr(_ADDRESS_long_2)
0x09B8	0x6EE2      	MOVWF       FSR1H 
0x09BA	0x51B1      	MOVF        Initialize_i_L0, 0, 1
0x09BC	0x26E1      	ADDWF       FSR1L, 1 
0x09BE	0x0E00      	MOVLW       0
0x09C0	0xBFB1      	BTFSC       Initialize_i_L0, 7, 1
0x09C2	0x0EFF      	MOVLW       255
0x09C4	0x22E2      	ADDWFC      FSR1H, 1 
0x09C6	0x0E02      	MOVLW       2
0x09C8	0x6EE6      	MOVWF       POSTINC1 
;sensor.c,1062 :: 		for (i = 0; i < 8; i++) {
0x09CA	0x2BB1      	INCF        Initialize_i_L0, 1, 1
;sensor.c,1065 :: 		}
0x09CC	0xD7DF      	BRA         L_Initialize180
L_Initialize181:
;sensor.c,1067 :: 		ADCON1 = 0x0F;
0x09CE	0x0E0F      	MOVLW       15
0x09D0	0x6EC1      	MOVWF       ADCON1 
;sensor.c,1068 :: 		GIE_bit = 0;           // Disable interrupts
0x09D2	0x9EF2      	BCF         GIE_bit, 7 
;sensor.c,1070 :: 		TRISA = 0x00;          // Set direction to be output
0x09D4	0x6A92      	CLRF        TRISA 
;sensor.c,1071 :: 		TRISB = 0x00;          // Set direction to be output
0x09D6	0x6A93      	CLRF        TRISB 
;sensor.c,1072 :: 		TRISC = 0x00;          // Set direction to be output
0x09D8	0x6A94      	CLRF        TRISC 
;sensor.c,1073 :: 		TRISD = 0x00;          // Set direction to be output
0x09DA	0x6A95      	CLRF        TRISD 
;sensor.c,1075 :: 		CS2_Direction = 0;      // Set direction to be output
0x09DC	0x9094      	BCF         TRISC0_bit, 0 
;sensor.c,1076 :: 		RST_Direction  = 0;    // Set direction to be output
0x09DE	0x9294      	BCF         TRISC1_bit, 1 
;sensor.c,1077 :: 		INT_Direction  = 1;    // Set direction to be input
0x09E0	0x8C94      	BSF         TRISC6_bit, 6 
;sensor.c,1078 :: 		WAKE_Direction = 0;    // Set direction to be output
0x09E2	0x9494      	BCF         TRISC2_bit, 2 
;sensor.c,1081 :: 		H3_Direction = 1;      // Direcao pinos termometro
0x09E4	0x8093      	BSF         TRISB0_bit, 0 
;sensor.c,1082 :: 		H2_Direction = 1;
0x09E6	0x8493      	BSF         TRISB2_bit, 2 
;sensor.c,1083 :: 		H1_Direction = 1;
0x09E8	0x8893      	BSF         TRISB4_bit, 4 
;sensor.c,1084 :: 		Serial_in_Direction = 1;
0x09EA	0x8E93      	BSF         TRISB7_bit, 7 
;sensor.c,1085 :: 		LD_Direction = 0;
0x09EC	0x9293      	BCF         TRISB1_bit, 1 
;sensor.c,1086 :: 		CLK_therm_Direction = 0;
0x09EE	0x9693      	BCF         TRISB3_bit, 3 
;sensor.c,1088 :: 		DATA_TX[0] = 0;        // Initialize first byte
0x09F0	0x6A25      	CLRF        _DATA_TX 
;sensor.c,1089 :: 		DATA_TX[1] = 0;        // Initialize first byte
0x09F2	0x6A26      	CLRF        _DATA_TX+1 
;sensor.c,1090 :: 		DATA_TX[2] = 0;        // Initialize first byte
0x09F4	0x6A27      	CLRF        _DATA_TX+2 
;sensor.c,1091 :: 		DATA_TX[3] = 0;        // Initialize first byte
0x09F6	0x6A28      	CLRF        _DATA_TX+3 
;sensor.c,1092 :: 		DATA_TX[4] = 0;        // Initialize first byte
0x09F8	0x6A29      	CLRF        _DATA_TX+4 
;sensor.c,1094 :: 		PORTD = 0;             // Clear PORTD register
0x09FA	0x6A83      	CLRF        PORTD 
;sensor.c,1095 :: 		LATD  = 0;             // Clear LATD register
0x09FC	0x6A8C      	CLRF        LATD 
;sensor.c,1097 :: 		Delay_ms(15);
0x09FE	0x0E31      	MOVLW       49
0x0A00	0x6E0C      	MOVWF       R12, 0
0x0A02	0x0EB2      	MOVLW       178
0x0A04	0x6E0D      	MOVWF       R13, 0
L_Initialize183:
0x0A06	0x2E0D      	DECFSZ      R13, 1, 0
0x0A08	0xD7FE      	BRA         L_Initialize183
0x0A0A	0x2E0C      	DECFSZ      R12, 1, 0
0x0A0C	0xD7FC      	BRA         L_Initialize183
0x0A0E	0x0000      	NOP
;sensor.c,1099 :: 		Lcd_Init();                        // Initialize LCD
0x0A10	0xDE1C      	RCALL       _Lcd_Init
;sensor.c,1100 :: 		Lcd_Cmd(_LCD_CLEAR);               // Clear display
0x0A12	0x0E01      	MOVLW       1
0x0A14	0x6FB5      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0A16	0xDEFC      	RCALL       _Lcd_Cmd
;sensor.c,1101 :: 		Lcd_Cmd(_LCD_CURSOR_OFF);          // Cursor off
0x0A18	0x0E0C      	MOVLW       12
0x0A1A	0x6FB5      	MOVWF       FARG_Lcd_Cmd_out_char, 1
0x0A1C	0xDEF9      	RCALL       _Lcd_Cmd
;sensor.c,1104 :: 		SPI1_Init_AdvancEd(_SPI_MASTER_OSC_DIV4, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_LOW_2_HIGH);
0x0A1E	0x6BB5      	CLRF        FARG_SPI1_Init_Advanced_master, 1
0x0A20	0x6BB6      	CLRF        FARG_SPI1_Init_Advanced_data_sample, 1
0x0A22	0x6BB7      	CLRF        FARG_SPI1_Init_Advanced_clock_idle, 1
0x0A24	0x0E01      	MOVLW       1
0x0A26	0x6FB8      	MOVWF       FARG_SPI1_Init_Advanced_transmit_edge, 1
0x0A28	0xDD2C      	RCALL       _SPI1_Init_Advanced
;sensor.c,1105 :: 		pin_reset();                              // Activate reset from pin
0x0A2A	0xDD78      	RCALL       _pin_reset
;sensor.c,1106 :: 		software_reset();                         // Activate software reset
0x0A2C	0xDE5A      	RCALL       _software_reset
;sensor.c,1107 :: 		RF_reset();                               // RF reset
0x0A2E	0xF000EC71  	CALL        _RF_reset, 0
;sensor.c,1108 :: 		set_WAKE_from_pin();                      // Set wake from pin
0x0A32	0xDDF3      	RCALL       _set_wake_from_pin
;sensor.c,1110 :: 		set_long_address(ADDRESS_long_2);         // Set long address
0x0A34	0x0E9B      	MOVLW       _ADDRESS_long_2
0x0A36	0x0100      	MOVLB       0
0x0A38	0x6FB5      	MOVWF       FARG_set_long_address_address, 1
0x0A3A	0x0E00      	MOVLW       hi_addr(_ADDRESS_long_2)
0x0A3C	0x6FB6      	MOVWF       FARG_set_long_address_address+1, 1
0x0A3E	0xDE6F      	RCALL       _set_long_address
;sensor.c,1111 :: 		set_short_address(ADDRESS_short_2);       // Set short address
0x0A40	0x0E23      	MOVLW       _ADDRESS_short_2
0x0A42	0x6FB5      	MOVWF       FARG_set_short_address_address, 1
0x0A44	0x0E00      	MOVLW       hi_addr(_ADDRESS_short_2)
0x0A46	0x6FB6      	MOVWF       FARG_set_short_address_address+1, 1
0x0A48	0xDF32      	RCALL       _set_short_address
;sensor.c,1112 :: 		set_PAN_ID(PAN_ID_1);                     // Set PAN_ID
0x0A4A	0x0E1D      	MOVLW       _PAN_ID_1
0x0A4C	0x0100      	MOVLB       0
0x0A4E	0x6FB5      	MOVWF       FARG_set_PAN_ID_address, 1
0x0A50	0x0E00      	MOVLW       hi_addr(_PAN_ID_1)
0x0A52	0x6FB6      	MOVWF       FARG_set_PAN_ID_address+1, 1
0x0A54	0xDE4D      	RCALL       _set_PAN_ID
;sensor.c,1114 :: 		init_ZIGBEE_nonbeacon();                  // Initialize ZigBee module
0x0A56	0xDF1B      	RCALL       _init_ZIGBEE_nonbeacon
;sensor.c,1115 :: 		nonbeacon_PAN_coordinator_device();
0x0A58	0xDE7E      	RCALL       _nonbeacon_PAN_coordinator_device
;sensor.c,1116 :: 		set_TX_power(31);                         // Set max TX power
0x0A5A	0x0E1F      	MOVLW       31
0x0A5C	0x0100      	MOVLB       0
0x0A5E	0x6FB5      	MOVWF       FARG_set_TX_power_power, 1
0x0A60	0xDD37      	RCALL       _set_TX_power
;sensor.c,1117 :: 		set_frame_format_filter(1);               // 1 all frames, 3 data frame only
0x0A62	0x0E01      	MOVLW       1
0x0A64	0x0100      	MOVLB       0
0x0A66	0x6FB5      	MOVWF       FARG_set_frame_format_filter_fff_mode, 1
0x0A68	0xDE91      	RCALL       _set_frame_format_filter
;sensor.c,1118 :: 		set_reception_mode(1);                    // 1 normal mode
0x0A6A	0x0E01      	MOVLW       1
0x0A6C	0x0100      	MOVLB       0
0x0A6E	0x6FB5      	MOVWF       FARG_set_reception_mode_r_mode, 1
0x0A70	0xDD6A      	RCALL       _set_reception_mode
;sensor.c,1120 :: 		pin_wake();                               // Wake from pin
0x0A72	0xDD95      	RCALL       _pin_wake
;sensor.c,1121 :: 		}
0x0A74	0x0012      	RETURN      0
; end of _Initialize
_EEPROM_Write:
;__Lib_EEPROM_256.c,21 :: 		
;__Lib_EEPROM_256.c,24 :: 		
L_EEPROM_Write0:
0x0A76	0xA2A6      	BTFSS       EECON1, 1 
0x0A78	0xD002      	BRA         L_EEPROM_Write1
;__Lib_EEPROM_256.c,25 :: 		
0x0A7A	0x0000      	NOP
0x0A7C	0xD7FC      	BRA         L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM_256.c,26 :: 		
0x0A7E	0x9CA6      	BCF         EECON1, 6 
;__Lib_EEPROM_256.c,27 :: 		
0x0A80	0xFFA9C0B1  	MOVFF       FARG_EEPROM_Write_address, EEADR
;__Lib_EEPROM_256.c,28 :: 		
0x0A84	0xFFA8C0B2  	MOVFF       FARG_EEPROM_Write_data_, EEDATA
;__Lib_EEPROM_256.c,29 :: 		
0x0A88	0x9EA6      	BCF         EECON1, 7 
;__Lib_EEPROM_256.c,30 :: 		
0x0A8A	0x84A6      	BSF         EECON1, 2 
;__Lib_EEPROM_256.c,32 :: 		
0x0A8C	0xF000CFF2  	MOVFF       INTCON, R0
;__Lib_EEPROM_256.c,35 :: 		
0x0A90	0x9EF2      	BCF         INTCON, 7 
;__Lib_EEPROM_256.c,36 :: 		
0x0A92	0x0E55      	MOVLW       85
0x0A94	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,37 :: 		
0x0A96	0x0EAA      	MOVLW       170
0x0A98	0x6EA7      	MOVWF       EECON2 
;__Lib_EEPROM_256.c,38 :: 		
0x0A9A	0x82A6      	BSF         EECON1, 1 
;__Lib_EEPROM_256.c,42 :: 		
0x0A9C	0xBE00      	BTFSC       R0, 7 
0x0A9E	0xD002      	BRA         L__EEPROM_Write2
0x0AA0	0x9EF2      	BCF         INTCON, 7 
0x0AA2	0xD001      	BRA         L__EEPROM_Write3
L__EEPROM_Write2:
0x0AA4	0x8EF2      	BSF         INTCON, 7 
L__EEPROM_Write3:
;__Lib_EEPROM_256.c,44 :: 		
0x0AA6	0x94A6      	BCF         EECON1, 2 
;__Lib_EEPROM_256.c,46 :: 		
0x0AA8	0x0012      	RETURN      0
; end of _EEPROM_Write
_Debounce_INT:
0x0AAA	0x0100      	MOVLB       0
0x0AAC	0x6BB1      	CLRF        Debounce_INT_intn_d_L0, 1
0x0AAE	0x6BB2      	CLRF        Debounce_INT_j_L0, 1
0x0AB0	0x6BB3      	CLRF        Debounce_INT_i_L0, 1
;sensor.c,799 :: 		char Debounce_INT() {
;sensor.c,801 :: 		for(i = 0; i < 5; i++) {
0x0AB2	0x6BB3      	CLRF        Debounce_INT_i_L0, 1
L_Debounce_INT59:
0x0AB4	0x0E05      	MOVLW       5
0x0AB6	0x5DB3      	SUBWF       Debounce_INT_i_L0, 0, 1
0x0AB8	0xE20A      	BC          L_Debounce_INT60
;sensor.c,802 :: 		intn_d = INT;
0x0ABA	0x0E00      	MOVLW       0
0x0ABC	0xBC82      	BTFSC       RC6_bit, 6 
0x0ABE	0x0E01      	MOVLW       1
0x0AC0	0x6FB1      	MOVWF       Debounce_INT_intn_d_L0, 1
;sensor.c,803 :: 		if (intn_d == 1)
0x0AC2	0x51B1      	MOVF        Debounce_INT_intn_d_L0, 0, 1
0x0AC4	0x0A01      	XORLW       1
0x0AC6	0xE101      	BNZ         L_Debounce_INT62
;sensor.c,804 :: 		j++;
0x0AC8	0x2BB2      	INCF        Debounce_INT_j_L0, 1, 1
L_Debounce_INT62:
;sensor.c,801 :: 		for(i = 0; i < 5; i++) {
0x0ACA	0x2BB3      	INCF        Debounce_INT_i_L0, 1, 1
;sensor.c,805 :: 		}
0x0ACC	0xD7F3      	BRA         L_Debounce_INT59
L_Debounce_INT60:
;sensor.c,806 :: 		if (j > 2)
0x0ACE	0x51B2      	MOVF        Debounce_INT_j_L0, 0, 1
0x0AD0	0x0802      	SUBLW       2
0x0AD2	0xE203      	BC          L_Debounce_INT63
;sensor.c,807 :: 		return 1;
0x0AD4	0x0E01      	MOVLW       1
0x0AD6	0x6E00      	MOVWF       R0 
0x0AD8	0x0012      	RETURN      0
L_Debounce_INT63:
;sensor.c,809 :: 		return 0;
0x0ADA	0x6A00      	CLRF        R0 
;sensor.c,810 :: 		}
0x0ADC	0x0012      	RETURN      0
; end of _Debounce_INT
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x0ADE	0xD010      	BRA         L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x0AE0	0x0E80      	MOVLW       128
0x0AE2	0x0100      	MOVLB       0
0x0AE4	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0AE6	0xD01A      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x0AE8	0x0EC0      	MOVLW       192
0x0AEA	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0AEC	0xD017      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x0AEE	0x0E94      	MOVLW       148
0x0AF0	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0AF2	0xD014      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x0AF4	0x0ED4      	MOVLW       212
0x0AF6	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0AF8	0xD011      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x0AFA	0x0E80      	MOVLW       128
0x0AFC	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
;__Lib_Lcd.c,72 :: 		
0x0AFE	0xD00E      	BRA         L_Lcd_Chr5
L_Lcd_Chr4:
0x0B00	0x0100      	MOVLB       0
0x0B02	0x51B1      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0B04	0x0A01      	XORLW       1
0x0B06	0xE0EC      	BZ          L_Lcd_Chr6
0x0B08	0x51B1      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0B0A	0x0A02      	XORLW       2
0x0B0C	0xE0ED      	BZ          L_Lcd_Chr7
0x0B0E	0x51B1      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0B10	0x0A03      	XORLW       3
0x0B12	0xE0ED      	BZ          L_Lcd_Chr8
0x0B14	0x51B1      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0B16	0x0A04      	XORLW       4
0x0B18	0xE0ED      	BZ          L_Lcd_Chr9
0x0B1A	0xD7EF      	BRA         L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x0B1C	0x05B2      	DECF        FARG_Lcd_Chr_column, 0, 1
0x0B1E	0x6E00      	MOVWF       R0 
0x0B20	0x51B1      	MOVF        FARG_Lcd_Chr_row, 0, 1
0x0B22	0x2600      	ADDWF       R0, 1 
0x0B24	0xF0B1C000  	MOVFF       R0, FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x0B28	0x8192      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,77 :: 		
0x0B2A	0xF0B5C000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x0B2E	0xDE70      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x0B30	0x9192      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,80 :: 		
0x0B32	0xF0B5C0B3  	MOVFF       FARG_Lcd_Chr_out_char, FARG_Lcd_Cmd_out_char
0x0B36	0xDE6C      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x0B38	0x8192      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0), 1
;__Lib_Lcd.c,82 :: 		
0x0B3A	0x0012      	RETURN      0
; end of _Lcd_Chr
_read_RX_FIFO:
0x0B3C	0x0100      	MOVLB       0
0x0B3E	0x6BB1      	CLRF        read_RX_FIFO_i_L0, 1
0x0B40	0x6BB2      	CLRF        read_RX_FIFO_i_L0+1, 1
;sensor.c,252 :: 		void read_RX_FIFO() {
;sensor.c,256 :: 		temp = read_ZIGBEE_short(BBREG1);      // disable receiving packets off air.
0x0B42	0x0E39      	MOVLW       57
0x0B44	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0B46	0xF000EC5E  	CALL        _read_ZIGBEE_short, 0
;sensor.c,257 :: 		temp = temp | 0x04;                    // mask for disable receiving packets
0x0B4A	0x0E04      	MOVLW       4
0x0B4C	0x1000      	IORWF       R0, 0 
0x0B4E	0x0100      	MOVLB       0
0x0B50	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,258 :: 		write_ZIGBEE_short(BBREG1, temp);
0x0B52	0x0E39      	MOVLW       57
0x0B54	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0B56	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,260 :: 		for(i=0; i<128; i++) {
0x0B5A	0x0100      	MOVLB       0
0x0B5C	0x6BB1      	CLRF        read_RX_FIFO_i_L0, 1
0x0B5E	0x6BB2      	CLRF        read_RX_FIFO_i_L0+1, 1
L_read_RX_FIFO0:
0x0B60	0x0E80      	MOVLW       128
0x0B62	0x19B2      	XORWF       read_RX_FIFO_i_L0+1, 0, 1
0x0B64	0x6E00      	MOVWF       R0 
0x0B66	0x0E80      	MOVLW       128
0x0B68	0x5C00      	SUBWF       R0, 0 
0x0B6A	0xE102      	BNZ         L__read_RX_FIFO224
0x0B6C	0x0E80      	MOVLW       128
0x0B6E	0x5DB1      	SUBWF       read_RX_FIFO_i_L0, 0, 1
L__read_RX_FIFO224:
0x0B70	0xE233      	BC          L_read_RX_FIFO1
;sensor.c,261 :: 		if(i <  (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x0B72	0x0E80      	MOVLW       128
0x0B74	0x19B2      	XORWF       read_RX_FIFO_i_L0+1, 0, 1
0x0B76	0x6E00      	MOVWF       R0 
0x0B78	0x0E80      	MOVLW       128
0x0B7A	0x5C00      	SUBWF       R0, 0 
0x0B7C	0xE102      	BNZ         L__read_RX_FIFO225
0x0B7E	0x0E20      	MOVLW       32
0x0B80	0x5DB1      	SUBWF       read_RX_FIFO_i_L0, 0, 1
L__read_RX_FIFO225:
0x0B82	0xE213      	BC          L_read_RX_FIFO3
;sensor.c,262 :: 		data_RX_FIFO[i] = read_ZIGBEE_long(address_RX_FIFO + i);  // reading valid data from RX FIFO
0x0B84	0x0E3B      	MOVLW       _data_RX_FIFO
0x0B86	0x25B1      	ADDWF       read_RX_FIFO_i_L0, 0, 1
0x0B88	0x6FB3      	MOVWF       FLOC__read_RX_FIFO, 1
0x0B8A	0x0E00      	MOVLW       hi_addr(_data_RX_FIFO)
0x0B8C	0x21B2      	ADDWFC      read_RX_FIFO_i_L0+1, 0, 1
0x0B8E	0x6FB4      	MOVWF       FLOC__read_RX_FIFO+1, 1
0x0B90	0x51B1      	MOVF        read_RX_FIFO_i_L0, 0, 1
0x0B92	0x2438      	ADDWF       _address_RX_FIFO, 0 
0x0B94	0x6FB5      	MOVWF       FARG_read_ZIGBEE_long_address, 1
0x0B96	0x51B2      	MOVF        read_RX_FIFO_i_L0+1, 0, 1
0x0B98	0x2039      	ADDWFC      _address_RX_FIFO+1, 0 
0x0B9A	0x6FB6      	MOVWF       FARG_read_ZIGBEE_long_address+1, 1
0x0B9C	0xDD0B      	RCALL       _read_ZIGBEE_long
0x0B9E	0xFFE1C0B3  	MOVFF       FLOC__read_RX_FIFO, FSR1L
0x0BA2	0xFFE2C0B4  	MOVFF       FLOC__read_RX_FIFO+1, FSR1H
0x0BA6	0xFFE6C000  	MOVFF       R0, POSTINC1
L_read_RX_FIFO3:
;sensor.c,263 :: 		if(i >= (1 + DATA_LENGHT + HEADER_LENGHT + 2 + 1 + 1))
0x0BAA	0x0E80      	MOVLW       128
0x0BAC	0x0100      	MOVLB       0
0x0BAE	0x19B2      	XORWF       read_RX_FIFO_i_L0+1, 0, 1
0x0BB0	0x6E00      	MOVWF       R0 
0x0BB2	0x0E80      	MOVLW       128
0x0BB4	0x5C00      	SUBWF       R0, 0 
0x0BB6	0xE102      	BNZ         L__read_RX_FIFO226
0x0BB8	0x0E20      	MOVLW       32
0x0BBA	0x5DB1      	SUBWF       read_RX_FIFO_i_L0, 0, 1
L__read_RX_FIFO226:
0x0BBC	0xE309      	BNC         L_read_RX_FIFO4
;sensor.c,264 :: 		lost_data = read_ZIGBEE_long(address_RX_FIFO + i);        // reading invalid data from RX FIFO
0x0BBE	0x51B1      	MOVF        read_RX_FIFO_i_L0, 0, 1
0x0BC0	0x2438      	ADDWF       _address_RX_FIFO, 0 
0x0BC2	0x6FB5      	MOVWF       FARG_read_ZIGBEE_long_address, 1
0x0BC4	0x51B2      	MOVF        read_RX_FIFO_i_L0+1, 0, 1
0x0BC6	0x2039      	ADDWFC      _address_RX_FIFO+1, 0 
0x0BC8	0x6FB6      	MOVWF       FARG_read_ZIGBEE_long_address+1, 1
0x0BCA	0xDCF4      	RCALL       _read_ZIGBEE_long
0x0BCC	0xF03AC000  	MOVFF       R0, _lost_data
L_read_RX_FIFO4:
;sensor.c,260 :: 		for(i=0; i<128; i++) {
0x0BD0	0x0100      	MOVLB       0
0x0BD2	0x4BB1      	INFSNZ      read_RX_FIFO_i_L0, 1, 1
0x0BD4	0x2BB2      	INCF        read_RX_FIFO_i_L0+1, 1, 1
;sensor.c,265 :: 		}
0x0BD6	0xD7C4      	BRA         L_read_RX_FIFO0
L_read_RX_FIFO1:
;sensor.c,267 :: 		SN =  data_RX_FIFO[3];      //ler o sequence number
0x0BD8	0xF016C03E  	MOVFF       _data_RX_FIFO+3, _SN
;sensor.c,269 :: 		DATA_RX[0] = data_RX_FIFO[HEADER_LENGHT + 1];               // coping valid data
0x0BDC	0xF079C047  	MOVFF       _data_RX_FIFO+12, _DATA_RX
;sensor.c,270 :: 		DATA_RX[1] = data_RX_FIFO[HEADER_LENGHT + 2];               // coping valid data
0x0BE0	0xF07AC048  	MOVFF       _data_RX_FIFO+13, _DATA_RX+1
;sensor.c,271 :: 		DATA_RX[2] = data_RX_FIFO[HEADER_LENGHT + 3];               // coping valid data
0x0BE4	0xF07BC049  	MOVFF       _data_RX_FIFO+14, _DATA_RX+2
;sensor.c,272 :: 		DATA_RX[3] = data_RX_FIFO[HEADER_LENGHT + 4];               // coping valid data
0x0BE8	0xF07CC04A  	MOVFF       _data_RX_FIFO+15, _DATA_RX+3
;sensor.c,273 :: 		DATA_RX[4] = data_RX_FIFO[HEADER_LENGHT + 5];               // coping valid data
0x0BEC	0xF07DC04B  	MOVFF       _data_RX_FIFO+16, _DATA_RX+4
;sensor.c,274 :: 		DATA_RX[5] = data_RX_FIFO[HEADER_LENGHT + 6];               // coping valid data
0x0BF0	0xF07EC04C  	MOVFF       _data_RX_FIFO+17, _DATA_RX+5
;sensor.c,275 :: 		DATA_RX[6] = data_RX_FIFO[HEADER_LENGHT + 7];               // coping valid data
0x0BF4	0xF07FC04D  	MOVFF       _data_RX_FIFO+18, _DATA_RX+6
;sensor.c,276 :: 		DATA_RX[7] = data_RX_FIFO[HEADER_LENGHT + 8];               // coping valid data
0x0BF8	0xF080C04E  	MOVFF       _data_RX_FIFO+19, _DATA_RX+7
;sensor.c,277 :: 		DATA_RX[8] = data_RX_FIFO[HEADER_LENGHT + 9];               // coping valid data
0x0BFC	0xF081C04F  	MOVFF       _data_RX_FIFO+20, _DATA_RX+8
;sensor.c,278 :: 		DATA_RX[9] = data_RX_FIFO[HEADER_LENGHT + 10];               // coping valid data
0x0C00	0xF082C050  	MOVFF       _data_RX_FIFO+21, _DATA_RX+9
;sensor.c,279 :: 		DATA_RX[10] = data_RX_FIFO[HEADER_LENGHT + 11];               // coping valid data
0x0C04	0xF083C051  	MOVFF       _data_RX_FIFO+22, _DATA_RX+10
;sensor.c,280 :: 		DATA_RX[11] = data_RX_FIFO[HEADER_LENGHT + 12];               // coping valid data
0x0C08	0xF084C052  	MOVFF       _data_RX_FIFO+23, _DATA_RX+11
;sensor.c,281 :: 		DATA_RX[12] = data_RX_FIFO[HEADER_LENGHT + 13];               // coping valid data
0x0C0C	0xF085C053  	MOVFF       _data_RX_FIFO+24, _DATA_RX+12
;sensor.c,282 :: 		DATA_RX[13] = data_RX_FIFO[HEADER_LENGHT + 14];               // coping valid data
0x0C10	0xF086C054  	MOVFF       _data_RX_FIFO+25, _DATA_RX+13
;sensor.c,283 :: 		DATA_RX[14] = data_RX_FIFO[HEADER_LENGHT + 15];               // coping valid data
0x0C14	0xF087C055  	MOVFF       _data_RX_FIFO+26, _DATA_RX+14
;sensor.c,284 :: 		DATA_RX[15] = data_RX_FIFO[HEADER_LENGHT + 16];               // coping valid data
0x0C18	0xF088C056  	MOVFF       _data_RX_FIFO+27, _DATA_RX+15
;sensor.c,286 :: 		LQI   = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 2];  // coping valid data
0x0C1C	0xF089C059  	MOVFF       _data_RX_FIFO+30, _LQI
;sensor.c,287 :: 		RSSI2 = data_RX_FIFO[1 + HEADER_LENGHT + DATA_LENGHT + 3];  // coping valid data
0x0C20	0xF05BC05A  	MOVFF       _data_RX_FIFO+31, _RSSI2
;sensor.c,289 :: 		temp = read_ZIGBEE_short(BBREG1);      // enable receiving packets off air.
0x0C24	0x0E39      	MOVLW       57
0x0C26	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0C28	0xF000EC5E  	CALL        _read_ZIGBEE_short, 0
;sensor.c,290 :: 		temp = temp & (!0x04);                 // mask for enable receiving
0x0C2C	0x0E00      	MOVLW       0
0x0C2E	0x1400      	ANDWF       R0, 0 
0x0C30	0x0100      	MOVLB       0
0x0C32	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
;sensor.c,291 :: 		write_ZIGBEE_short(BBREG1, temp);
0x0C34	0x0E39      	MOVLW       57
0x0C36	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0C38	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,292 :: 		}
0x0C3C	0x0012      	RETURN      0
; end of _read_RX_FIFO
_write_TX_normal_FIFO:
0x0C3E	0x0100      	MOVLB       0
0x0C40	0x6BB1      	CLRF        write_TX_normal_FIFO_i_L0, 1
0x0C42	0x6BB2      	CLRF        write_TX_normal_FIFO_i_L0+1, 1
;sensor.c,332 :: 		void write_TX_normal_FIFO() {
;sensor.c,335 :: 		data_TX_normal_FIFO[0]  = HEADER_LENGHT;
0x0C44	0x0E0B      	MOVLW       11
0x0C46	0x6E5C      	MOVWF       _data_TX_normal_FIFO 
;sensor.c,336 :: 		data_TX_normal_FIFO[1]  = HEADER_LENGHT + DATA_LENGHT;
0x0C48	0x0E1B      	MOVLW       27
0x0C4A	0x6E5D      	MOVWF       _data_TX_normal_FIFO+1 
;sensor.c,337 :: 		data_TX_normal_FIFO[2]  = 0x21;                        // control frame
0x0C4C	0x0E21      	MOVLW       33
0x0C4E	0x6E5E      	MOVWF       _data_TX_normal_FIFO+2 
;sensor.c,338 :: 		data_TX_normal_FIFO[3]  = 0x88;
0x0C50	0x0E88      	MOVLW       136
0x0C52	0x6E5F      	MOVWF       _data_TX_normal_FIFO+3 
;sensor.c,339 :: 		data_TX_normal_FIFO[4]  = SEQ_NUMBER;                  // sequence number
0x0C54	0xF060C015  	MOVFF       _SEQ_NUMBER, _data_TX_normal_FIFO+4
;sensor.c,340 :: 		data_TX_normal_FIFO[5]  = PAN_ID_2[1];                 // destinatoin pan
0x0C58	0xF061C022  	MOVFF       _PAN_ID_2+1, _data_TX_normal_FIFO+5
;sensor.c,341 :: 		data_TX_normal_FIFO[6]  = PAN_ID_2[0];
0x0C5C	0xF062C021  	MOVFF       _PAN_ID_2, _data_TX_normal_FIFO+6
;sensor.c,342 :: 		data_TX_normal_FIFO[7]  = ADDRESS_short_2[0];          // destination address
0x0C60	0xF063C023  	MOVFF       _ADDRESS_short_2, _data_TX_normal_FIFO+7
;sensor.c,343 :: 		data_TX_normal_FIFO[8]  = ADDRESS_short_2[1];
0x0C64	0xF064C024  	MOVFF       _ADDRESS_short_2+1, _data_TX_normal_FIFO+8
;sensor.c,344 :: 		data_TX_normal_FIFO[9]  = PAN_ID_1[0];                 // source pan
0x0C68	0xF065C01D  	MOVFF       _PAN_ID_1, _data_TX_normal_FIFO+9
;sensor.c,345 :: 		data_TX_normal_FIFO[10] = PAN_ID_1[1];
0x0C6C	0xF066C01E  	MOVFF       _PAN_ID_1+1, _data_TX_normal_FIFO+10
;sensor.c,346 :: 		data_TX_normal_FIFO[11] = ADDRESS_short_1[0];          // source address
0x0C70	0xF067C01F  	MOVFF       _ADDRESS_short_1, _data_TX_normal_FIFO+11
;sensor.c,347 :: 		data_TX_normal_FIFO[12] = ADDRESS_short_1[1];
0x0C74	0xF068C020  	MOVFF       _ADDRESS_short_1+1, _data_TX_normal_FIFO+12
;sensor.c,349 :: 		data_TX_normal_FIFO[13] = DATA_TX[0];                  // data
0x0C78	0xF069C025  	MOVFF       _DATA_TX, _data_TX_normal_FIFO+13
;sensor.c,350 :: 		data_TX_normal_FIFO[14] = DATA_TX[1];                  // data
0x0C7C	0xF06AC026  	MOVFF       _DATA_TX+1, _data_TX_normal_FIFO+14
;sensor.c,351 :: 		data_TX_normal_FIFO[15] = DATA_TX[2];                  // data
0x0C80	0xF06BC027  	MOVFF       _DATA_TX+2, _data_TX_normal_FIFO+15
;sensor.c,352 :: 		data_TX_normal_FIFO[16] = DATA_TX[3];                  // data
0x0C84	0xF06CC028  	MOVFF       _DATA_TX+3, _data_TX_normal_FIFO+16
;sensor.c,353 :: 		data_TX_normal_FIFO[17] = DATA_TX[4];                  // data
0x0C88	0xF06DC029  	MOVFF       _DATA_TX+4, _data_TX_normal_FIFO+17
;sensor.c,354 :: 		data_TX_normal_FIFO[18] = DATA_TX[5];                  // data
0x0C8C	0xF06EC02A  	MOVFF       _DATA_TX+5, _data_TX_normal_FIFO+18
;sensor.c,355 :: 		data_TX_normal_FIFO[19] = DATA_TX[6];                  // data
0x0C90	0xF06FC02B  	MOVFF       _DATA_TX+6, _data_TX_normal_FIFO+19
;sensor.c,356 :: 		data_TX_normal_FIFO[20] = DATA_TX[7];                  // data
0x0C94	0xF070C02C  	MOVFF       _DATA_TX+7, _data_TX_normal_FIFO+20
;sensor.c,357 :: 		data_TX_normal_FIFO[21] = DATA_TX[8];                  // data
0x0C98	0xF071C02D  	MOVFF       _DATA_TX+8, _data_TX_normal_FIFO+21
;sensor.c,358 :: 		data_TX_normal_FIFO[22] = DATA_TX[9];                  // data
0x0C9C	0xF072C02E  	MOVFF       _DATA_TX+9, _data_TX_normal_FIFO+22
;sensor.c,359 :: 		data_TX_normal_FIFO[23] = DATA_TX[10];                  // data
0x0CA0	0xF073C02F  	MOVFF       _DATA_TX+10, _data_TX_normal_FIFO+23
;sensor.c,360 :: 		data_TX_normal_FIFO[24] = DATA_TX[11];                  // data
0x0CA4	0xF074C030  	MOVFF       _DATA_TX+11, _data_TX_normal_FIFO+24
;sensor.c,361 :: 		data_TX_normal_FIFO[25] = DATA_TX[12];                  // data
0x0CA8	0xF075C031  	MOVFF       _DATA_TX+12, _data_TX_normal_FIFO+25
;sensor.c,362 :: 		data_TX_normal_FIFO[26] = DATA_TX[13];                  // data
0x0CAC	0xF076C032  	MOVFF       _DATA_TX+13, _data_TX_normal_FIFO+26
;sensor.c,363 :: 		data_TX_normal_FIFO[27] = DATA_TX[14];                  // data
0x0CB0	0xF077C033  	MOVFF       _DATA_TX+14, _data_TX_normal_FIFO+27
;sensor.c,364 :: 		data_TX_normal_FIFO[28] = DATA_TX[15];                  // data
0x0CB4	0xF078C034  	MOVFF       _DATA_TX+15, _data_TX_normal_FIFO+28
;sensor.c,366 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
0x0CB8	0x6BB1      	CLRF        write_TX_normal_FIFO_i_L0, 1
0x0CBA	0x6BB2      	CLRF        write_TX_normal_FIFO_i_L0+1, 1
L_write_TX_normal_FIFO5:
0x0CBC	0x0E80      	MOVLW       128
0x0CBE	0x19B2      	XORWF       write_TX_normal_FIFO_i_L0+1, 0, 1
0x0CC0	0x6E00      	MOVWF       R0 
0x0CC2	0x0E80      	MOVLW       128
0x0CC4	0x5C00      	SUBWF       R0, 0 
0x0CC6	0xE102      	BNZ         L__write_TX_normal_FIFO227
0x0CC8	0x0E1D      	MOVLW       29
0x0CCA	0x5DB1      	SUBWF       write_TX_normal_FIFO_i_L0, 0, 1
L__write_TX_normal_FIFO227:
0x0CCC	0xE214      	BC          L_write_TX_normal_FIFO6
;sensor.c,367 :: 		write_ZIGBEE_long(address_TX_normal_FIFO + i, data_TX_normal_FIFO[i]); // write frame into normal FIFO
0x0CCE	0x51B1      	MOVF        write_TX_normal_FIFO_i_L0, 0, 1
0x0CD0	0x2436      	ADDWF       _address_TX_normal_FIFO, 0 
0x0CD2	0x6FBB      	MOVWF       FARG_write_ZIGBEE_long_address, 1
0x0CD4	0x51B2      	MOVF        write_TX_normal_FIFO_i_L0+1, 0, 1
0x0CD6	0x2037      	ADDWFC      _address_TX_normal_FIFO+1, 0 
0x0CD8	0x6FBC      	MOVWF       FARG_write_ZIGBEE_long_address+1, 1
0x0CDA	0x0E5C      	MOVLW       _data_TX_normal_FIFO
0x0CDC	0x25B1      	ADDWF       write_TX_normal_FIFO_i_L0, 0, 1
0x0CDE	0x6EE9      	MOVWF       FSR0L 
0x0CE0	0x0E00      	MOVLW       hi_addr(_data_TX_normal_FIFO)
0x0CE2	0x21B2      	ADDWFC      write_TX_normal_FIFO_i_L0+1, 0, 1
0x0CE4	0x6EEA      	MOVWF       FSR0H 
0x0CE6	0xF0BDCFEE  	MOVFF       POSTINC0, FARG_write_ZIGBEE_long_data_r
0x0CEA	0xF000EC20  	CALL        _write_ZIGBEE_long, 0
;sensor.c,366 :: 		for(i = 0; i < (HEADER_LENGHT + DATA_LENGHT + 2); i++) {
0x0CEE	0x0100      	MOVLB       0
0x0CF0	0x4BB1      	INFSNZ      write_TX_normal_FIFO_i_L0, 1, 1
0x0CF2	0x2BB2      	INCF        write_TX_normal_FIFO_i_L0+1, 1, 1
;sensor.c,368 :: 		}
0x0CF4	0xD7E3      	BRA         L_write_TX_normal_FIFO5
L_write_TX_normal_FIFO6:
;sensor.c,372 :: 		start_transmit();
0x0CF6	0xDC8A      	RCALL       _start_transmit
;sensor.c,373 :: 		}
0x0CF8	0x0012      	RETURN      0
; end of _write_TX_normal_FIFO
_main:
0x0CFA	0x6A15      	CLRF        _SEQ_NUMBER 
0x0CFC	0x6A16      	CLRF        _SN 
0x0CFE	0x6A17      	CLRF        _battery 
0x0D00	0x6A18      	CLRF        24 
0x0D02	0x0E30      	MOVLW       48
0x0D04	0x6E19      	MOVWF       _dig3 
0x0D06	0x6A1A      	CLRF        26 
0x0D08	0x6A1B      	CLRF        _degrees 
0x0D0A	0x6A1C      	CLRF        28 
0x0D0C	0x0100      	MOVLB       0
0x0D0E	0x6BA3      	CLRF        main_trans_L0, 1
0x0D10	0x0E04      	MOVLW       4
0x0D12	0x6FA4      	MOVWF       main_sleep_L0, 1
0x0D14	0x0E00      	MOVLW       0
0x0D16	0x6FA5      	MOVWF       main_sleep_L0+1, 1
0x0D18	0x6BA6      	CLRF        main_lostT_L0, 1
0x0D1A	0x6BA7      	CLRF        main_cond_L0, 1
0x0D1C	0x6BA8      	CLRF        main_cont_L0, 1
0x0D1E	0x0E02      	MOVLW       2
0x0D20	0x6FA9      	MOVWF       main_adr_L0, 1
0x0D22	0x6BAA      	CLRF        main_lastSN_L0, 1
0x0D24	0x6BAB      	CLRF        main_lastBat_L0, 1
0x0D26	0x6BAC      	CLRF        main_lastDeg_L0, 1
0x0D28	0x6BAD      	CLRF        main_lastD3_L0, 1
0x0D2A	0x6BAE      	CLRF        main_lastD2_L0, 1
0x0D2C	0x6BAF      	CLRF        main_lastD1_L0, 1
;sensor.c,1123 :: 		void main() {
;sensor.c,1131 :: 		Initialize();                      // Initialize MCU and Bee click board
0x0D2E	0xDDE8      	RCALL       _Initialize
;sensor.c,1133 :: 		while(1) {
L_main184:
;sensor.c,1134 :: 		if(sleep == 13){
0x0D30	0x0E00      	MOVLW       0
0x0D32	0x0100      	MOVLB       0
0x0D34	0x19A5      	XORWF       main_sleep_L0+1, 0, 1
0x0D36	0xE102      	BNZ         L__main233
0x0D38	0x0E0D      	MOVLW       13
0x0D3A	0x19A4      	XORWF       main_sleep_L0, 0, 1
L__main233:
0x0D3C	0xE121      	BNZ         L_main186
;sensor.c,1135 :: 		PWR_reset();
0x0D3E	0xDDD8      	RCALL       _PWR_reset
;sensor.c,1136 :: 		write_ZIGBEE_short(SLPACK, 0x80);
0x0D40	0x0E35      	MOVLW       53
0x0D42	0x0100      	MOVLB       0
0x0D44	0x6FBB      	MOVWF       FARG_write_ZIGBEE_short_address, 1
0x0D46	0x0E80      	MOVLW       128
0x0D48	0x6FBC      	MOVWF       FARG_write_ZIGBEE_short_data_r, 1
0x0D4A	0xF000EC4C  	CALL        _write_ZIGBEE_short, 0
;sensor.c,1137 :: 		sleep = 0;
0x0D4E	0x0100      	MOVLB       0
0x0D50	0x6BA4      	CLRF        main_sleep_L0, 1
0x0D52	0x6BA5      	CLRF        main_sleep_L0+1, 1
;sensor.c,1138 :: 		cond = 0;
0x0D54	0x6BA7      	CLRF        main_cond_L0, 1
;sensor.c,1139 :: 		trans = 0;
0x0D56	0x6BA3      	CLRF        main_trans_L0, 1
;sensor.c,1140 :: 		Lcd_Chr(1,5,'s');
0x0D58	0x0E01      	MOVLW       1
0x0D5A	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0D5C	0x0E05      	MOVLW       5
0x0D5E	0x6FB2      	MOVWF       FARG_Lcd_Chr_column, 1
0x0D60	0x0E73      	MOVLW       115
0x0D62	0x6FB3      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0D64	0xDEBC      	RCALL       _Lcd_Chr
;sensor.c,1141 :: 		Delay_ms(125);
0x0D66	0x0E02      	MOVLW       2
0x0D68	0x6E0B      	MOVWF       R11, 0
0x0D6A	0x0E96      	MOVLW       150
0x0D6C	0x6E0C      	MOVWF       R12, 0
0x0D6E	0x0ED5      	MOVLW       213
0x0D70	0x6E0D      	MOVWF       R13, 0
L_main187:
0x0D72	0x2E0D      	DECFSZ      R13, 1, 0
0x0D74	0xD7FE      	BRA         L_main187
0x0D76	0x2E0C      	DECFSZ      R12, 1, 0
0x0D78	0xD7FC      	BRA         L_main187
0x0D7A	0x2E0B      	DECFSZ      R11, 1, 0
0x0D7C	0xD7FA      	BRA         L_main187
;sensor.c,1143 :: 		Initialize();
0x0D7E	0xDDC0      	RCALL       _Initialize
;sensor.c,1144 :: 		}
L_main186:
;sensor.c,1148 :: 		if(trans == 0){
0x0D80	0x0100      	MOVLB       0
0x0D82	0x51A3      	MOVF        main_trans_L0, 0, 1
0x0D84	0x0A00      	XORLW       0
0x0D86	0xE13E      	BNZ         L_main188
;sensor.c,1149 :: 		Lcd_Chr(2,5,'b');
0x0D88	0x0E02      	MOVLW       2
0x0D8A	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0D8C	0x0E05      	MOVLW       5
0x0D8E	0x6FB2      	MOVWF       FARG_Lcd_Chr_column, 1
0x0D90	0x0E62      	MOVLW       98
0x0D92	0x6FB3      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0D94	0xDEA4      	RCALL       _Lcd_Chr
;sensor.c,1150 :: 		if(Debounce_INT() == 0 ){
0x0D96	0xDE89      	RCALL       _Debounce_INT
0x0D98	0x5000      	MOVF        R0, 0 
0x0D9A	0x0A00      	XORLW       0
0x0D9C	0xE119      	BNZ         L_main189
;sensor.c,1152 :: 		temp1 = read_ZIGBEE_short(INTSTAT); // Read and flush register INTSTAT
0x0D9E	0x0E31      	MOVLW       49
0x0DA0	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0DA2	0xF000EC5E  	CALL        _read_ZIGBEE_short, 0
0x0DA6	0xF035C000  	MOVFF       R0, _temp1
;sensor.c,1153 :: 		read_RX_FIFO();                     // Read receive data
0x0DAA	0xDEC8      	RCALL       _read_RX_FIFO
;sensor.c,1162 :: 		lost = SN + lastSN;
0x0DAC	0x0100      	MOVLB       0
0x0DAE	0x51AA      	MOVF        main_lastSN_L0, 0, 1
0x0DB0	0x2416      	ADDWF       _SN, 0 
0x0DB2	0x6E00      	MOVWF       R0 
;sensor.c,1163 :: 		lostT += lost;
0x0DB4	0x51A6      	MOVF        main_lostT_L0, 0, 1
0x0DB6	0x2600      	ADDWF       R0, 1 
0x0DB8	0xF0A6C000  	MOVFF       R0, main_lostT_L0
;sensor.c,1164 :: 		lastSN = SN;
0x0DBC	0xF0AAC016  	MOVFF       _SN, main_lastSN_L0
;sensor.c,1165 :: 		EEPROM_Write(0x00, lostT);
0x0DC0	0x6BB1      	CLRF        FARG_EEPROM_Write_address, 1
0x0DC2	0xF0B2C000  	MOVFF       R0, FARG_EEPROM_Write_data_
0x0DC6	0xDE57      	RCALL       _EEPROM_Write
;sensor.c,1168 :: 		cond = 1;
0x0DC8	0x0E01      	MOVLW       1
0x0DCA	0x0100      	MOVLB       0
0x0DCC	0x6FA7      	MOVWF       main_cond_L0, 1
;sensor.c,1170 :: 		}
0x0DCE	0xD01A      	BRA         L_main190
L_main189:
;sensor.c,1171 :: 		else if(cond > 0){
0x0DD0	0x0E80      	MOVLW       128
0x0DD2	0x6E00      	MOVWF       R0 
0x0DD4	0x0E80      	MOVLW       128
0x0DD6	0xBFA7      	BTFSC       main_cond_L0, 7, 1
0x0DD8	0x0E7F      	MOVLW       127
0x0DDA	0x5C00      	SUBWF       R0, 0 
0x0DDC	0xE102      	BNZ         L__main234
0x0DDE	0x51A7      	MOVF        main_cond_L0, 0, 1
0x0DE0	0x0800      	SUBLW       0
L__main234:
0x0DE2	0xE210      	BC          L_main191
;sensor.c,1173 :: 		cond ++;
0x0DE4	0x2BA7      	INCF        main_cond_L0, 1, 1
;sensor.c,1174 :: 		if(cond == 7){
0x0DE6	0x51A7      	MOVF        main_cond_L0, 0, 1
0x0DE8	0x0A07      	XORLW       7
0x0DEA	0xE10C      	BNZ         L_main192
;sensor.c,1175 :: 		Initialize();                      // Initialize MCU and Bee click board
0x0DEC	0xDD89      	RCALL       _Initialize
;sensor.c,1176 :: 		write_TX_normal_FIFO();
0x0DEE	0xDF27      	RCALL       _write_TX_normal_FIFO
;sensor.c,1177 :: 		Lcd_Chr(1,1,'b');
0x0DF0	0x0E01      	MOVLW       1
0x0DF2	0x0100      	MOVLB       0
0x0DF4	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0DF6	0x0E01      	MOVLW       1
0x0DF8	0x6FB2      	MOVWF       FARG_Lcd_Chr_column, 1
0x0DFA	0x0E62      	MOVLW       98
0x0DFC	0x6FB3      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0DFE	0xDE6F      	RCALL       _Lcd_Chr
;sensor.c,1178 :: 		trans = 1;
0x0E00	0x0E01      	MOVLW       1
0x0E02	0x6FA3      	MOVWF       main_trans_L0, 1
;sensor.c,1179 :: 		}
L_main192:
;sensor.c,1180 :: 		}
L_main191:
L_main190:
;sensor.c,1181 :: 		} //final trans = 0
L_main188:
;sensor.c,1182 :: 		if(trans == 1){
0x0E04	0x51A3      	MOVF        main_trans_L0, 0, 1
0x0E06	0x0A01      	XORLW       1
0x0E08	0xE14B      	BNZ         L_main193
;sensor.c,1183 :: 		Delay_ms(9);
0x0E0A	0x0E1E      	MOVLW       30
0x0E0C	0x6E0C      	MOVWF       R12, 0
0x0E0E	0x0E37      	MOVLW       55
0x0E10	0x6E0D      	MOVWF       R13, 0
L_main194:
0x0E12	0x2E0D      	DECFSZ      R13, 1, 0
0x0E14	0xD7FE      	BRA         L_main194
0x0E16	0x2E0C      	DECFSZ      R12, 1, 0
0x0E18	0xD7FC      	BRA         L_main194
;sensor.c,1185 :: 		DATA_TX[15]='3';
0x0E1A	0x0E33      	MOVLW       51
0x0E1C	0x6E34      	MOVWF       _DATA_TX+15 
;sensor.c,1186 :: 		DATA_TX[1]='4';
0x0E1E	0x0E34      	MOVLW       52
0x0E20	0x6E26      	MOVWF       _DATA_TX+1 
;sensor.c,1187 :: 		DATA_TX[2]=dig3;
0x0E22	0xF027C019  	MOVFF       _dig3, _DATA_TX+2
;sensor.c,1188 :: 		DATA_TX[3]=degrees;
0x0E26	0xF028C01B  	MOVFF       _degrees, _DATA_TX+3
;sensor.c,1189 :: 		DATA_TX[4]=battery;
0x0E2A	0xF029C017  	MOVFF       _battery, _DATA_TX+4
;sensor.c,1190 :: 		write_TX_normal_FIFO();
0x0E2E	0xDF07      	RCALL       _write_TX_normal_FIFO
;sensor.c,1191 :: 		i = read_ZIGBEE_short(TXSTAT);
0x0E30	0x0E24      	MOVLW       36
0x0E32	0x0100      	MOVLB       0
0x0E34	0x6FBB      	MOVWF       FARG_read_ZIGBEE_short_address, 1
0x0E36	0xF000EC5E  	CALL        _read_ZIGBEE_short, 0
0x0E3A	0xF0B0C000  	MOVFF       R0, main_i_L0
;sensor.c,1193 :: 		SEQ_NUMBER++;
0x0E3E	0x2A15      	INCF        _SEQ_NUMBER, 1 
;sensor.c,1195 :: 		if((i & 1) == 0){
0x0E40	0x0E01      	MOVLW       1
0x0E42	0x1400      	ANDWF       R0, 0 
0x0E44	0x6E01      	MOVWF       R1 
0x0E46	0x0E00      	MOVLW       0
0x0E48	0xBE01      	BTFSC       R1, 7 
0x0E4A	0x0EFF      	MOVLW       255
0x0E4C	0x6E00      	MOVWF       R0 
0x0E4E	0x0E00      	MOVLW       0
0x0E50	0x1800      	XORWF       R0, 0 
0x0E52	0xE102      	BNZ         L__main235
0x0E54	0x0E00      	MOVLW       0
0x0E56	0x1801      	XORWF       R1, 0 
L__main235:
0x0E58	0xE115      	BNZ         L_main195
;sensor.c,1196 :: 		trans = 2;
0x0E5A	0x0E02      	MOVLW       2
0x0E5C	0x0100      	MOVLB       0
0x0E5E	0x6FA3      	MOVWF       main_trans_L0, 1
;sensor.c,1197 :: 		cond = 0;
0x0E60	0x6BA7      	CLRF        main_cond_L0, 1
;sensor.c,1198 :: 		Initialize();
0x0E62	0xDD4E      	RCALL       _Initialize
;sensor.c,1199 :: 		Lcd_Chr(1,1,'a');
0x0E64	0x0E01      	MOVLW       1
0x0E66	0x0100      	MOVLB       0
0x0E68	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0E6A	0x0E01      	MOVLW       1
0x0E6C	0x6FB2      	MOVWF       FARG_Lcd_Chr_column, 1
0x0E6E	0x0E61      	MOVLW       97
0x0E70	0x6FB3      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0E72	0xDE35      	RCALL       _Lcd_Chr
;sensor.c,1201 :: 		EEPROM_Write(adr, 300);
0x0E74	0xF0B1C0A9  	MOVFF       main_adr_L0, FARG_EEPROM_Write_address
0x0E78	0x0E2C      	MOVLW       44
0x0E7A	0x6FB2      	MOVWF       FARG_EEPROM_Write_data_, 1
0x0E7C	0xDDFC      	RCALL       _EEPROM_Write
;sensor.c,1202 :: 		adr ++;
0x0E7E	0x0100      	MOVLB       0
0x0E80	0x2BA9      	INCF        main_adr_L0, 1, 1
;sensor.c,1203 :: 		}
0x0E82	0xD00E      	BRA         L_main196
L_main195:
0x0E84	0x0100      	MOVLB       0
;sensor.c,1204 :: 		else if((i & 1) == 1){
0x0E86	0x0E01      	MOVLW       1
0x0E88	0x15B0      	ANDWF       main_i_L0, 0, 1
0x0E8A	0x6E01      	MOVWF       R1 
0x0E8C	0x5001      	MOVF        R1, 0 
0x0E8E	0x0A01      	XORLW       1
0x0E90	0xE107      	BNZ         L_main197
;sensor.c,1205 :: 		Lcd_Chr(1,1,'r');
0x0E92	0x0E01      	MOVLW       1
0x0E94	0x6FB1      	MOVWF       FARG_Lcd_Chr_row, 1
0x0E96	0x0E01      	MOVLW       1
0x0E98	0x6FB2      	MOVWF       FARG_Lcd_Chr_column, 1
0x0E9A	0x0E72      	MOVLW       114
0x0E9C	0x6FB3      	MOVWF       FARG_Lcd_Chr_out_char, 1
0x0E9E	0xDE1F      	RCALL       _Lcd_Chr
;sensor.c,1206 :: 		}
L_main197:
L_main196:
;sensor.c,1207 :: 		}   //final trans ==1
L_main193:
;sensor.c,1209 :: 		sleep++;
0x0EA0	0x4BA4      	INFSNZ      main_sleep_L0, 1, 1
0x0EA2	0x2BA5      	INCF        main_sleep_L0+1, 1, 1
;sensor.c,1210 :: 		Delay_us(910);
0x0EA4	0x0E03      	MOVLW       3
0x0EA6	0x6E0C      	MOVWF       R12, 0
0x0EA8	0x0EF3      	MOVLW       243
0x0EAA	0x6E0D      	MOVWF       R13, 0
L_main198:
0x0EAC	0x2E0D      	DECFSZ      R13, 1, 0
0x0EAE	0xD7FE      	BRA         L_main198
0x0EB0	0x2E0C      	DECFSZ      R12, 1, 0
0x0EB2	0xD7FC      	BRA         L_main198
0x0EB4	0x0000      	NOP
;sensor.c,1212 :: 		}//final while
0x0EB6	0xD73C      	BRA         L_main184
;sensor.c,1213 :: 		}
0x0EB8	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [18]    _SPI1_Write
0x002E      [18]    _SPI1_Read
0x0040      [88]    _write_ZIGBEE_long
0x0098      [36]    _write_ZIGBEE_short
0x00BC      [38]    _read_ZIGBEE_short
0x00E2      [76]    _RF_reset
0x012E      [18]    _enable_PLL
0x0140      [12]    _enable_interrupt
0x014C     [440]    _set_channel
0x0304      [12]    _Delay_50us
0x0310       [6]    _Delay_1us
0x0316      [20]    _Delay_5500us
0x032A      [56]    _set_RSSI_mode
0x0362     [180]    _set_CCA_mode
0x0416     [108]    _init_ZIGBEE_basic
0x0482      [78]    _SPI1_Init_Advanced
0x04D0      [76]    _set_TX_power
0x051C      [42]    _pin_reset
0x0546      [88]    _set_reception_mode
0x059E      [22]    _pin_wake
0x05B4      [88]    _read_ZIGBEE_long
0x060C      [14]    _start_transmit
0x061A      [48]    _set_wake_from_pin
0x064A     [152]    _Lcd_Init
0x06E2      [14]    _software_reset
0x06F0      [46]    _set_PAN_ID
0x071E      [56]    _set_long_address
0x0756      [54]    _nonbeacon_PAN_coordinator_device
0x078C     [132]    _set_frame_format_filter
0x0810     [126]    _Lcd_Cmd
0x088E      [32]    _init_ZIGBEE_nonbeacon
0x08AE      [50]    _set_short_address
0x08E0      [16]    ___CC2DW
0x08F0      [16]    _PWR_reset
0x0900     [374]    _Initialize
0x0A76      [52]    _EEPROM_Write
0x0AAA      [52]    _Debounce_INT
0x0ADE      [94]    _Lcd_Chr
0x0B3C     [258]    _read_RX_FIFO
0x0C3E     [188]    _write_TX_normal_FIFO
0x0CFA     [448]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    R0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    R2
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    strcat_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strncpy_cp_L0
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    ___Low_saveWREG
0x0015       [1]    _SEQ_NUMBER
0x0016       [1]    ___Low_saveSTATUS
0x0016       [1]    _SN
0x0017       [1]    ___Low_saveBSR
0x0017       [2]    _battery
0x0019       [2]    _dig3
0x001B       [2]    _degrees
0x001D       [2]    _PAN_ID_1
0x001F       [2]    _ADDRESS_short_1
0x0021       [2]    _PAN_ID_2
0x0023       [2]    _ADDRESS_short_2
0x0025      [16]    _DATA_TX
0x0035       [1]    _temp1
0x0036       [2]    _address_TX_normal_FIFO
0x0038       [2]    _address_RX_FIFO
0x003A       [1]    _lost_data
0x003B      [32]    _data_RX_FIFO
0x005B       [1]    _RSSI2
0x005C      [29]    _data_TX_normal_FIFO
0x0079      [16]    _DATA_RX
0x0089       [1]    _LQI
0x008A       [4]    _SPI_Rd_Ptr
0x008E       [4]    _SPI_Wr_Ptr
0x0092       [0]    __Lib_Lcd_cmd_status
0x0093       [8]    _ADDRESS_long_1
0x009B       [8]    _ADDRESS_long_2
0x00A3       [1]    main_trans_L0
0x00A4       [2]    main_sleep_L0
0x00A6       [1]    main_lostT_L0
0x00A7       [1]    main_cond_L0
0x00A8       [1]    main_cont_L0
0x00A9       [1]    main_adr_L0
0x00AA       [1]    main_lastSN_L0
0x00AB       [1]    main_lastBat_L0
0x00AC       [1]    main_lastDeg_L0
0x00AD       [1]    main_lastD3_L0
0x00AE       [1]    main_lastD2_L0
0x00AF       [1]    main_lastD1_L0
0x00B0       [1]    main_i_L0
0x00B1       [1]    FARG_EEPROM_Write_address
0x00B1       [1]    Debounce_INT_intn_d_L0
0x00B1       [1]    Initialize_i_L0
0x00B1       [1]    FARG_Lcd_Chr_row
0x00B1       [2]    write_TX_normal_FIFO_i_L0
0x00B1       [2]    read_RX_FIFO_i_L0
0x00B2       [1]    FARG_Lcd_Chr_column
0x00B2       [1]    Debounce_INT_j_L0
0x00B2       [1]    FARG_EEPROM_Write_data_
0x00B3       [1]    FARG_Lcd_Chr_out_char
0x00B3       [1]    Debounce_INT_i_L0
0x00B3       [2]    FLOC__read_RX_FIFO
0x00B5       [1]    FARG_set_frame_format_filter_fff_mode
0x00B5       [1]    FARG_Lcd_Cmd_out_char
0x00B5       [1]    FARG_set_reception_mode_r_mode
0x00B5       [2]    FARG_read_ZIGBEE_long_address
0x00B5       [1]    FARG_SPI1_Init_Advanced_master
0x00B5       [2]    FARG_set_PAN_ID_address
0x00B5       [2]    FARG_set_short_address_address
0x00B5       [2]    FARG_set_long_address_address
0x00B5       [1]    FARG_set_TX_power_power
0x00B6       [1]    FARG_SPI1_Init_Advanced_data_sample
0x00B7       [1]    FARG_SPI1_Init_Advanced_clock_idle
0x00B7       [1]    read_ZIGBEE_long_address_low_L0
0x00B7       [1]    set_long_address_i_L0
0x00B8       [1]    FARG_SPI1_Init_Advanced_transmit_edge
0x00B8       [1]    read_ZIGBEE_long_dummy_data_r_L0
0x00B9       [1]    FARG_set_channel_channel_number
0x00B9       [1]    FARG_set_CCA_mode_CCA_mode
0x00B9       [1]    FARG_set_RSSI_mode_RSSI_mode
0x00BA       [1]    RF_reset_temp_L0
0x00BB       [2]    FARG_write_ZIGBEE_long_address
0x00BB       [1]    FARG_write_ZIGBEE_short_address
0x00BB       [1]    FARG_read_ZIGBEE_short_address
0x00BC       [1]    read_ZIGBEE_short_dummy_data_r_L0
0x00BC       [1]    FARG_write_ZIGBEE_short_data_r
0x00BD       [1]    FARG_write_ZIGBEE_long_data_r
0x00BE       [1]    write_ZIGBEE_long_address_low_L0
0x00BF       [1]    FARG_SPI1_Write_data_
0x00BF       [1]    FARG_SPI1_Read_buffer
0x0F80       [0]    CVREF_bit
0x0F80       [0]    CLKI_bit
0x0F80       [0]    LVDIN_bit
0x0F80       [0]    NOT_SS_bit
0x0F80       [0]    VREFP_bit
0x0F80       [0]    VREFN_bit
0x0F80       [0]    CLKO_bit
0x0F80       [0]    SS_bit
0x0F80       [0]    AN0_bit
0x0F80       [0]    RA4_bit
0x0F80       [0]    RA2_bit
0x0F80       [0]    RA3_bit
0x0F80       [0]    RA6_bit
0x0F80       [0]    RA7_bit
0x0F80       [0]    RA5_bit
0x0F80       [1]    PORTA
0x0F80       [0]    RA1_bit
0x0F80       [0]    AN4_bit
0x0F80       [0]    T0CKI_bit
0x0F80       [0]    OSC1_bit
0x0F80       [0]    OSC2_bit
0x0F80       [0]    AN1_bit
0x0F80       [0]    RA0_bit
0x0F80       [0]    AN3_bit
0x0F80       [0]    AN2_bit
0x0F81       [0]    CCP2_PORTB_bit
0x0F81       [0]    INT2_bit
0x0F81       [0]    KBI1_bit
0x0F81       [0]    KBI0_bit
0x0F81       [0]    INT1_bit
0x0F81       [0]    RB7_bit
0x0F81       [0]    RB6_bit
0x0F81       [0]    INT0_bit
0x0F81       [1]    PORTB
0x0F81       [0]    KBI2_bit
0x0F81       [0]    PGM_bit
0x0F81       [0]    AN11_bit
0x0F81       [0]    PGD_bit
0x0F81       [0]    PGC_bit
0x0F81       [0]    AN9_bit
0x0F81       [0]    AN12_bit
0x0F81       [0]    KBI3_bit
0x0F81       [0]    AN8_bit
0x0F81       [0]    AN10_bit
0x0F81       [0]    RB5_bit
0x0F81       [0]    CLK_therm
0x0F81       [0]    RB0_bit
0x0F81       [0]    H1
0x0F81       [0]    H3
0x0F81       [0]    H2
0x0F81       [0]    RB3_bit
0x0F81       [0]    RB4_bit
0x0F81       [0]    RB2_bit
0x0F81       [0]    RB1_bit
0x0F81       [0]    LD
0x0F82       [0]    RC0_bit
0x0F82       [0]    INT
0x0F82       [0]    RC1_bit
0x0F82       [0]    RC6_bit
0x0F82       [0]    RC7_bit
0x0F82       [1]    PORTC
0x0F82       [0]    RC5_bit
0x0F82       [0]    RC2_bit
0x0F82       [0]    RC3_bit
0x0F82       [0]    RC4_bit
0x0F82       [0]    RX__bit
0x0F82       [0]    CCP1_bit
0x0F82       [0]    T13CKI_bit
0x0F82       [0]    SCK_bit
0x0F82       [0]    SDO_bit
0x0F82       [0]    SDI_bit
0x0F82       [0]    TX_bit
0x0F82       [0]    T1OSI_bit
0x0F82       [0]    SDA_bit
0x0F82       [0]    CCP2_PORTC_bit
0x0F82       [0]    T1OSO_bit
0x0F82       [0]    SCL_bit
0x0F82       [0]    T1CKI_bit
0x0F82       [0]    CK_bit
0x0F83       [0]    PSP5_bit
0x0F83       [1]    PORTD
0x0F83       [0]    PSP6_bit
0x0F83       [0]    PSP1_bit
0x0F83       [0]    PSP0_bit
0x0F83       [0]    PSP2_bit
0x0F83       [0]    PSP4_bit
0x0F83       [0]    PSP3_bit
0x0F83       [0]    P1C_bit
0x0F83       [0]    P1D_bit
0x0F83       [0]    RD0_bit
0x0F83       [0]    P1B_bit
0x0F83       [0]    LCD_D6
0x0F83       [0]    LCD_D7
0x0F83       [0]    LCD_D4
0x0F83       [0]    LCD_D5
0x0F83       [0]    RD6_bit
0x0F83       [0]    RD5_bit
0x0F83       [0]    PSP7_bit
0x0F83       [0]    RD7_bit
0x0F83       [0]    RD2_bit
0x0F83       [0]    RD1_bit
0x0F83       [0]    RD4_bit
0x0F83       [0]    RD3_bit
0x0F84       [0]    NOT_WR_bit
0x0F84       [0]    LCD_EN
0x0F84       [0]    NOT_RD_bit
0x0F84       [0]    VPP_bit
0x0F84       [0]    LCD_RS
0x0F84       [0]    RD_bit
0x0F84       [0]    CS_bit
0x0F84       [0]    NOT_CS_bit
0x0F84       [0]    WR_bit
0x0F84       [0]    NOT_MCLR_bit
0x0F84       [0]    RE0_bit
0x0F84       [0]    RE3_bit
0x0F84       [0]    AN6_bit
0x0F84       [0]    RE2_bit
0x0F84       [0]    AN5_bit
0x0F84       [1]    PORTE
0x0F84       [0]    MCLR_bit
0x0F84       [0]    RE1_bit
0x0F84       [0]    AN7_bit
0x0F89       [1]    LATA
0x0F89       [0]    LATA7_bit
0x0F89       [0]    LATA2_bit
0x0F89       [0]    LATA1_bit
0x0F89       [0]    LATA0_bit
0x0F89       [0]    LATA3_bit
0x0F89       [0]    LATA5_bit
0x0F89       [0]    LATA6_bit
0x0F89       [0]    LATA4_bit
0x0F8A       [0]    LATB6_bit
0x0F8A       [1]    LATB
0x0F8A       [0]    Serial_in
0x0F8A       [0]    LATB7_bit
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [0]    LATB2_bit
0x0F8A       [0]    LATB1_bit
0x0F8A       [0]    LATB0_bit
0x0F8A       [0]    LATB4_bit
0x0F8B       [0]    LATC5_bit
0x0F8B       [0]    LATC4_bit
0x0F8B       [1]    LATC
0x0F8B       [0]    LATC7_bit
0x0F8B       [0]    WAKE
0x0F8B       [0]    LATC6_bit
0x0F8B       [0]    LATC3_bit
0x0F8B       [0]    LATC0_bit
0x0F8B       [0]    RST
0x0F8B       [0]    CS2
0x0F8B       [0]    LATC1_bit
0x0F8B       [0]    LATC2_bit
0x0F8C       [0]    LATD2_bit
0x0F8C       [0]    LATD4_bit
0x0F8C       [1]    LATD
0x0F8C       [0]    LATD3_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD5_bit
0x0F8C       [0]    LATD0_bit
0x0F8D       [1]    LATE
0x0F8D       [0]    LATE2_bit
0x0F8D       [0]    LATE1_bit
0x0F8D       [0]    LATE0_bit
0x0F92       [0]    TRISA2_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA4_bit
0x0F92       [0]    TRISA7_bit
0x0F92       [1]    TRISA
0x0F92       [0]    TRISA5_bit
0x0F92       [0]    TRISA6_bit
0x0F93       [0]    TRISB1_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [0]    Serial_in_Direction
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    H3_Direction
0x0F93       [0]    CLK_therm_Direction
0x0F93       [1]    TRISB
0x0F93       [0]    H1_Direction
0x0F93       [0]    TRISB0_bit
0x0F93       [0]    H2_Direction
0x0F93       [0]    LD_Direction
0x0F94       [0]    TRISC1_bit
0x0F94       [0]    RST_Direction
0x0F94       [1]    TRISC
0x0F94       [0]    INT_Direction
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    WAKE_Direction
0x0F94       [0]    CS2_Direction
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC4_bit
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    LCD_D5_Direction
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    LCD_D4_Direction
0x0F96       [0]    TRISE1_bit
0x0F96       [0]    OBF_TRISE_bit
0x0F96       [0]    PSPMODE_bit
0x0F96       [0]    TRISE2_bit
0x0F96       [0]    PSPMODE_TRISE_bit
0x0F96       [0]    IBOV_TRISE_bit
0x0F96       [1]    TRISE
0x0F96       [0]    IBF_bit
0x0F96       [0]    LCD_EN_Direction
0x0F96       [0]    TRISE0_bit
0x0F96       [0]    OBF_bit
0x0F96       [0]    IBF_TRISE_bit
0x0F96       [0]    IBOV_bit
0x0F96       [0]    LCD_RS_Direction
0x0F9B       [0]    TUN4_bit
0x0F9B       [0]    TUN3_bit
0x0F9B       [0]    INTSRC_bit
0x0F9B       [0]    PLLEN_bit
0x0F9B       [0]    TUN0_bit
0x0F9B       [1]    OSCTUNE
0x0F9B       [0]    TUN2_bit
0x0F9B       [0]    TUN1_bit
0x0F9D       [0]    RCIE_bit
0x0F9D       [0]    TXIE_bit
0x0F9D       [0]    SSPIE_bit
0x0F9D       [0]    ADIE_bit
0x0F9D       [1]    PIE1
0x0F9D       [0]    PSPIE_bit
0x0F9D       [0]    CCP1IE_bit
0x0F9D       [0]    TMR2IE_bit
0x0F9D       [0]    TMR1IE_bit
0x0F9E       [0]    RCIF_bit
0x0F9E       [0]    TMR2IF_bit
0x0F9E       [0]    SSPIF_bit
0x0F9E       [0]    TXIF_bit
0x0F9E       [0]    TMR1IF_bit
0x0F9E       [0]    CCP1IF_bit
0x0F9E       [0]    PSPIF_bit
0x0F9E       [1]    PIR1
0x0F9E       [0]    ADIF_bit
0x0F9F       [0]    ADIP_bit
0x0F9F       [0]    RCIP_bit
0x0F9F       [1]    IPR1
0x0F9F       [0]    PSPIP_bit
0x0F9F       [0]    TXIP_bit
0x0F9F       [0]    TMR2IP_bit
0x0F9F       [0]    TMR1IP_bit
0x0F9F       [0]    SSPIP_bit
0x0F9F       [0]    CCP1IP_bit
0x0FA0       [0]    CMIE_bit
0x0FA0       [0]    EEIE_bit
0x0FA0       [0]    LVDIE_bit
0x0FA0       [1]    PIE2
0x0FA0       [0]    OSCFIE_bit
0x0FA0       [0]    HLVDIE_bit
0x0FA0       [0]    TMR3IE_bit
0x0FA0       [0]    CCP2IE_bit
0x0FA0       [0]    BCLIE_bit
0x0FA1       [0]    BCLIF_bit
0x0FA1       [0]    HLVDIF_bit
0x0FA1       [1]    PIR2
0x0FA1       [0]    EEIF_bit
0x0FA1       [0]    CMIF_bit
0x0FA1       [0]    OSCFIF_bit
0x0FA1       [0]    LVDIF_bit
0x0FA1       [0]    CCP2IF_bit
0x0FA1       [0]    TMR3IF_bit
0x0FA2       [0]    HLVDIP_bit
0x0FA2       [0]    BCLIP_bit
0x0FA2       [0]    CCP2IP_bit
0x0FA2       [0]    TMR3IP_bit
0x0FA2       [0]    OSCFIP_bit
0x0FA2       [0]    LVDIP_bit
0x0FA2       [0]    EEIP_bit
0x0FA2       [0]    CMIP_bit
0x0FA2       [1]    IPR2
0x0FA6       [0]    WRERR_bit
0x0FA6       [1]    EECON1
0x0FA6       [0]    WR_EECON1_bit
0x0FA6       [0]    RD_EECON1_bit
0x0FA6       [0]    WREN_bit
0x0FA6       [0]    FREE_bit
0x0FA6       [0]    EEPGD_bit
0x0FA6       [0]    CFGS_bit
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FAB       [0]    OERR_bit
0x0FAB       [0]    FERR_bit
0x0FAB       [0]    RX9_bit
0x0FAB       [0]    SREN_bit
0x0FAB       [1]    RCSTA
0x0FAB       [0]    CREN_bit
0x0FAB       [0]    ADDEN_bit
0x0FAB       [0]    SPEN_bit
0x0FAB       [0]    ADEN_bit
0x0FAB       [0]    RX9D_bit
0x0FAC       [0]    CSRC_bit
0x0FAC       [0]    TX9_bit
0x0FAC       [0]    TX9D_bit
0x0FAC       [0]    TRMT_bit
0x0FAC       [0]    BRGH_bit
0x0FAC       [0]    TXEN_bit
0x0FAC       [0]    SYNC_bit
0x0FAC       [0]    SENDB_bit
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB1       [0]    T3CKPS1_bit
0x0FB1       [0]    T3CKPS0_bit
0x0FB1       [0]    T3CCP2_bit
0x0FB1       [0]    RD16_bit
0x0FB1       [0]    NOT_T3SYNC_bit
0x0FB1       [0]    TMR3CS_bit
0x0FB1       [0]    TMR3ON_bit
0x0FB1       [0]    T3SYNC_bit
0x0FB1       [0]    T3CCP1_bit
0x0FB1       [1]    T3CON
0x0FB2       [1]    TMR3L
0x0FB3       [1]    TMR3H
0x0FB4       [0]    CM1_bit
0x0FB4       [0]    CM2_bit
0x0FB4       [1]    CMCON
0x0FB4       [0]    CM0_bit
0x0FB4       [0]    C1OUT_bit
0x0FB4       [0]    C2INV_bit
0x0FB4       [0]    C1INV_bit
0x0FB4       [0]    CIS_bit
0x0FB4       [0]    C2OUT_bit
0x0FB5       [0]    CVR3_bit
0x0FB5       [0]    CVR1_bit
0x0FB5       [0]    CVR0_bit
0x0FB5       [1]    CVRCON
0x0FB5       [0]    CVR2_bit
0x0FB5       [0]    CVROE_bit
0x0FB5       [0]    CVREN_bit
0x0FB5       [0]    CVRR_bit
0x0FB5       [0]    CVRSS_bit
0x0FB6       [0]    PSSAC1_bit
0x0FB6       [0]    PSSBD1_bit
0x0FB6       [0]    PSSAC0_bit
0x0FB6       [0]    ECCPAS1_bit
0x0FB6       [0]    ECCPAS0_bit
0x0FB6       [0]    ECCPASE_bit
0x0FB6       [0]    PSSBD0_bit
0x0FB6       [1]    ECCP1AS
0x0FB6       [0]    ECCPAS2_bit
0x0FB7       [0]    PDC1_bit
0x0FB7       [0]    PDC0_bit
0x0FB7       [0]    PDC4_bit
0x0FB7       [0]    PDC6_bit
0x0FB7       [1]    PWM1CON
0x0FB7       [0]    PDC2_bit
0x0FB7       [0]    PRSEN_bit
0x0FB7       [0]    PDC3_bit
0x0FB7       [0]    PDC5_bit
0x0FB8       [1]    BAUDCON
0x0FB8       [1]    BAUDCTL
0x0FB8       [0]    TXCKP_bit
0x0FB8       [0]    ABDOVF_bit
0x0FB8       [0]    RCMT_bit
0x0FB8       [0]    RXDTP_bit
0x0FB8       [0]    RCIDL_bit
0x0FB8       [0]    WUE_bit
0x0FB8       [0]    ABDEN_bit
0x0FB8       [0]    SCKP_bit
0x0FB8       [0]    BRG16_bit
0x0FBA       [0]    CCP2Y_bit
0x0FBA       [0]    DC2B1_bit
0x0FBA       [1]    CCP2CON
0x0FBA       [0]    CCP2X_bit
0x0FBA       [0]    DC2B0_bit
0x0FBA       [0]    CCP2M1_bit
0x0FBA       [0]    CCP2M0_bit
0x0FBA       [0]    CCP2M3_bit
0x0FBA       [0]    CCP2M2_bit
0x0FBB       [1]    CCPR2L
0x0FBB       [1]    CCPR2
0x0FBC       [1]    CCPR2H
0x0FBD       [0]    CCP1Y_bit
0x0FBD       [0]    CCP1X_bit
0x0FBD       [1]    CCP1CON
0x0FBD       [0]    P1M1_bit
0x0FBD       [0]    CCP1M2_bit
0x0FBD       [0]    CCP1M3_bit
0x0FBD       [0]    DC1B0_bit
0x0FBD       [0]    CCP1M0_bit
0x0FBD       [0]    P1M0_bit
0x0FBD       [0]    DC1B1_bit
0x0FBD       [0]    CCP1M1_bit
0x0FBE       [1]    CCPR1L
0x0FBE       [1]    CCPR1
0x0FBF       [1]    CCPR1H
0x0FC0       [1]    ADCON2
0x0FC0       [0]    ADCS2_bit
0x0FC0       [0]    ADCS1_bit
0x0FC0       [0]    ADCS0_bit
0x0FC0       [0]    ACQT0_bit
0x0FC0       [0]    ADFM_bit
0x0FC0       [0]    ACQT2_bit
0x0FC0       [0]    ACQT1_bit
0x0FC1       [0]    PCFG2_bit
0x0FC1       [0]    PCFG3_bit
0x0FC1       [0]    PCFG0_bit
0x0FC1       [0]    PCFG1_bit
0x0FC1       [1]    ADCON1
0x0FC1       [0]    VCFG1_bit
0x0FC1       [0]    VCFG0_bit
0x0FC2       [1]    ADCON0
0x0FC2       [0]    DONE_bit
0x0FC2       [0]    CHS3_bit
0x0FC2       [0]    GO_DONE_bit
0x0FC2       [0]    NOT_DONE_bit
0x0FC2       [0]    CHS2_bit
0x0FC2       [0]    GO_bit
0x0FC2       [0]    ADON_bit
0x0FC2       [0]    CHS1_bit
0x0FC2       [0]    CHS0_bit
0x0FC3       [1]    ADRES
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FC5       [0]    GCEN_bit
0x0FC5       [0]    RSEN_bit
0x0FC5       [0]    ACKDT_bit
0x0FC5       [1]    SSPCON2
0x0FC5       [0]    RCEN_bit
0x0FC5       [0]    SEN_bit
0x0FC5       [0]    ACKSTAT_bit
0x0FC5       [0]    PEN_bit
0x0FC5       [0]    ACKEN_bit
0x0FC6       [1]    SSPCON1
0x0FC6       [0]    SSPM2_bit
0x0FC6       [0]    SSPM3_bit
0x0FC6       [0]    SSPM0_bit
0x0FC6       [0]    SSPM1_bit
0x0FC6       [0]    SSPOV_bit
0x0FC6       [0]    WCOL_bit
0x0FC6       [0]    SSPEN_bit
0x0FC6       [0]    CKP_bit
0x0FC7       [0]    NOT_WRITE_bit
0x0FC7       [0]    NOT_ADDRESS_bit
0x0FC7       [1]    SSPSTAT
0x0FC7       [0]    D_A_bit
0x0FC7       [0]    D_bit
0x0FC7       [0]    BF_bit
0x0FC7       [0]    S_bit
0x0FC7       [0]    P_bit
0x0FC7       [0]    UA_bit
0x0FC7       [0]    SMP_bit
0x0FC7       [0]    NOT_W_bit
0x0FC7       [0]    R_bit
0x0FC7       [0]    CKE_bit
0x0FC7       [0]    NOT_A_bit
0x0FC7       [0]    R_W_bit
0x0FC8       [1]    SSPADD
0x0FC9       [1]    SSPBUF
0x0FCA       [0]    T2CKPS0_bit
0x0FCA       [0]    T2CKPS1_bit
0x0FCA       [0]    T2OUTPS3_bit
0x0FCA       [0]    T2OUTPS2_bit
0x0FCA       [0]    T2OUTPS1_bit
0x0FCA       [1]    T2CON
0x0FCA       [0]    TMR2ON_bit
0x0FCA       [0]    T2OUTPS0_bit
0x0FCB       [1]    PR2
0x0FCC       [1]    TMR2
0x0FCD       [1]    T1CON
0x0FCD       [0]    T1SYNC_bit
0x0FCD       [0]    T1OSCEN_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCD       [0]    RD16_T1CON_bit
0x0FCD       [0]    NOT_T1SYNC_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCD       [0]    T1RUN_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD0       [1]    RCON
0x0FD0       [0]    SBOREN_bit
0x0FD0       [0]    RI_bit
0x0FD0       [0]    NOT_BOR_bit
0x0FD0       [0]    IPEN_bit
0x0FD0       [0]    POR_bit
0x0FD0       [0]    BOR_bit
0x0FD0       [0]    TO__bit
0x0FD0       [0]    PD_bit
0x0FD0       [0]    NOT_POR_bit
0x0FD0       [0]    NOT_RI_bit
0x0FD0       [0]    NOT_TO_bit
0x0FD0       [0]    NOT_PD_bit
0x0FD1       [1]    WDTCON
0x0FD1       [0]    SWDTE_bit
0x0FD1       [0]    SWDTEN_bit
0x0FD2       [1]    HLVDCON
0x0FD2       [1]    LVDCON
0x0FD2       [0]    LVV0_bit
0x0FD2       [0]    IRVST_bit
0x0FD2       [0]    LVV2_bit
0x0FD2       [0]    LVV1_bit
0x0FD2       [0]    LVDEN_bit
0x0FD2       [0]    LVDL1_bit
0x0FD2       [0]    LVDL0_bit
0x0FD2       [0]    LVDL3_bit
0x0FD2       [0]    LVDL2_bit
0x0FD2       [0]    LVV3_bit
0x0FD2       [0]    HLVDEN_bit
0x0FD2       [0]    HLVDL3_bit
0x0FD2       [0]    IVRST_bit
0x0FD2       [0]    VDIRMAG_bit
0x0FD2       [0]    HLVDL2_bit
0x0FD2       [0]    HLVDL0_bit
0x0FD2       [0]    BGST_bit
0x0FD2       [0]    HLVDL1_bit
0x0FD3       [1]    OSCCON
0x0FD3       [0]    FLTS_bit
0x0FD3       [0]    IRCF1_bit
0x0FD3       [0]    IRCF0_bit
0x0FD3       [0]    IDLEN_bit
0x0FD3       [0]    IRCF2_bit
0x0FD3       [0]    SCS1_bit
0x0FD3       [0]    SCS0_bit
0x0FD3       [0]    OSTS_bit
0x0FD3       [0]    IOFS_bit
0x0FD5       [0]    PSA_bit
0x0FD5       [0]    T0PS2_bit
0x0FD5       [1]    T0CON
0x0FD5       [0]    T0SE_bit
0x0FD5       [0]    T0PS1_bit
0x0FD5       [0]    T08BIT_bit
0x0FD5       [0]    TMR0ON_bit
0x0FD5       [0]    T0PS0_bit
0x0FD5       [0]    T0CS_bit
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [0]    N_bit
0x0FD8       [0]    OV_bit
0x0FD8       [1]    STATUS
0x0FD8       [0]    Z_bit
0x0FD8       [0]    DC_bit
0x0FD8       [0]    C_bit
0x0FD9       [2]    FSR2
0x0FD9       [2]    FSR2PTR
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDB       [1]    PLUSW2
0x0FDC       [1]    PREINC2
0x0FDD       [1]    POSTDEC2
0x0FDE       [1]    POSTINC2
0x0FDF       [1]    INDF2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1
0x0FE1       [2]    FSR1PTR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE3       [1]    PLUSW1
0x0FE4       [1]    PREINC1
0x0FE5       [1]    POSTDEC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0PTR
0x0FE9       [2]    FSR0
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEB       [1]    PLUSW0
0x0FEC       [1]    PREINC0
0x0FED       [1]    POSTDEC0
0x0FEE       [1]    POSTINC0
0x0FEF       [1]    INDF0
0x0FF0       [0]    INT1IE_bit
0x0FF0       [0]    INT2IF_bit
0x0FF0       [0]    INT1IF_bit
0x0FF0       [0]    INT2IP_bit
0x0FF0       [0]    INT1IP_bit
0x0FF0       [0]    INT2IE_bit
0x0FF0       [0]    INT1F_bit
0x0FF0       [1]    INTCON3
0x0FF0       [0]    INT2P_bit
0x0FF0       [0]    INT1P_bit
0x0FF0       [0]    INT2F_bit
0x0FF0       [0]    INT1E_bit
0x0FF0       [0]    INT2E_bit
0x0FF1       [0]    INTEDG0_bit
0x0FF1       [0]    RBPU_bit
0x0FF1       [0]    NOT_RBPU_bit
0x0FF1       [0]    INTEDG1_bit
0x0FF1       [0]    RBIP_bit
0x0FF1       [0]    TMR0IP_bit
0x0FF1       [0]    INTEDG2_bit
0x0FF1       [1]    INTCON2
0x0FF2       [0]    GIEH_bit
0x0FF2       [0]    RBIF_bit
0x0FF2       [0]    T0IE_bit
0x0FF2       [0]    GIEL_bit
0x0FF2       [0]    INT0E_bit
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [0]    RBIE_bit
0x0FF2       [0]    INT0F_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    INT0IF_bit
0x0FF2       [0]    T0IF_bit
0x0FF2       [0]    INT0IE_bit
0x0FF2       [0]    PEIE_bit
0x0FF2       [0]    GIE_bit
0x0FF3       [1]    PROD
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTR
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [0]    TBLPTRU0_bit
0x0FF8       [0]    ACSS_bit
0x0FF8       [0]    TBLPTRU2_bit
0x0FF8       [0]    TBLPTRU3_bit
0x0FF8       [0]    TBLPTRU4_bit
0x0FF8       [0]    TBLPTRU1_bit
0x0FF8       [1]    TBLPTRU
0x0FF9       [1]    PC
0x0FF9       [1]    PCL
0x0FFA       [1]    PCLATH
0x0FFB       [0]    PCU3_bit
0x0FFB       [0]    PCU4_bit
0x0FFB       [1]    PCLATU
0x0FFB       [0]    PCU0_bit
0x0FFB       [0]    PCU1_bit
0x0FFB       [0]    PCU2_bit
0x0FFC       [0]    SP4_bit
0x0FFC       [0]    SP3_bit
0x0FFC       [0]    STKFUL_bit
0x0FFC       [0]    STKUNF_bit
0x0FFC       [0]    SP2_bit
0x0FFC       [1]    STKPTR
0x0FFC       [0]    STKOVF_bit
0x0FFC       [0]    SP1_bit
0x0FFC       [0]    SP0_bit
0x0FFD       [1]    TOSL
0x0FFD       [1]    TOS
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Label List: ** 
//----------------------------------------------
  L_read_RX_FIFO0
  L_read_RX_FIFO1
  L_read_RX_FIFO2
  L_read_RX_FIFO3
  L_read_RX_FIFO4
  L_write_TX_normal_FIFO5
  L_write_TX_normal_FIFO6
  L_write_TX_normal_FIFO7
  L_pin_reset8
  L_pin_reset9
  L_RF_reset10
  L_set_channel11
  L_set_channel12
  L_set_channel13
  L_set_channel14
  L_set_channel15
  L_set_channel16
  L_set_channel17
  L_set_channel18
  L_set_channel19
  L_set_channel20
  L_set_channel21
  L_set_channel22
  L_set_channel23
  L_set_channel24
  L_set_channel25
  L_set_channel26
  L_set_channel27
  L_set_channel28
  L_set_channel29
  L_set_channel30
  L_set_channel31
  L_set_CCA_mode32
  L_set_CCA_mode33
  L_set_CCA_mode34
  L_set_CCA_mode35
  L_set_CCA_mode36
  L_set_RSSI_mode37
  L_set_RSSI_mode38
  L_set_RSSI_mode39
  L_set_RSSI_mode40
  L_set_reception_mode41
  L_set_reception_mode42
  L_set_reception_mode43
  L_set_reception_mode44
  L_set_reception_mode45
  L_set_frame_format_filter46
  L_set_frame_format_filter47
  L_set_frame_format_filter48
  L_set_frame_format_filter49
  L_set_frame_format_filter50
  L_set_frame_format_filter51
  L_set_long_address52
  L_set_long_address53
  L_set_long_address54
  L_pin_wake55
  L_set_TX_power56
  L_set_TX_power57
  L_set_TX_power58
  L_Debounce_INT59
  L_Debounce_INT60
  L_Debounce_INT61
  L_Debounce_INT62
  L_Debounce_INT63
  L_Debounce_INT64
  L_Decoder_therm65
  L_Decoder_therm66
  L_Decoder_therm67
  L_Decoder_therm68
  L_Decoder_therm69
  L_Decoder_therm70
  L_Decoder_therm71
  L_Decoder_therm72
  L_Decoder_therm73
  L_Decoder_therm74
  L_Decoder_therm75
  L_Decoder_therm76
  L_Decoder_therm77
  L_Decoder_therm78
  L_Decoder_therm79
  L_Decoder_therm80
  L_Decoder_therm81
  L_Decoder_therm82
  L_Decoder_therm83
  L_Decoder_therm84
  L_Decoder_therm85
  L_Decoder_therm86
  L_Decoder_therm87
  L_Decoder_therm88
  L_Decoder_therm89
  L_Decoder_therm90
  L_Decoder_therm91
  L_Decoder_therm92
  L_Decoder_therm93
  L_Decoder_therm94
  L_Decoder_therm95
  L_Decoder_therm96
  L_Decoder_therm97
  L_Decoder_therm98
  L_Decoder_therm99
  L_Decoder_therm100
  L_Decoder_therm101
  L_Decoder_therm102
  L_Decoder_therm103
  L_Decoder_therm104
  L_Decoder_therm105
  L_Decoder_therm106
  L_Decoder_therm107
  L_Decoder_therm108
  L_Decoder_therm109
  L_Decoder_therm110
  L_Decoder_therm111
  L_Decoder_therm112
  L_Decoder_therm113
  L_Decoder_therm114
  L_Decoder_therm115
  L_Decoder_therm116
  L_Decoder_therm117
  L_Decoder_therm118
  L_Decoder_therm119
  L_Decoder_therm120
  L_Decoder_therm121
  L_Read_therm_serial122
  L_Read_therm_serial123
  L_Read_therm_serial124
  L_Read_therm_serial125
  L_Read_therm_serial126
  L_Read_therm_serial127
  L_Read_therm_serial128
  L_Read_therm_serial129
  L_Read_therm_serial130
  L_Read_therm_serial131
  L_Read_therm_serial132
  L_Read_therm_serial133
  L_Read_therm_serial134
  L_Read_therm_serial135
  L_Read_therm_serial136
  L_Read_therm_serial137
  L_Read_therm_serial138
  L_Read_therm_serial139
  L_Read_therm_serial140
  L_Read_therm_serial141
  L_Read_therm_serial142
  L_Read_therm_serial143
  L_Read_therm_serial144
  L_Read_therm_serial145
  L_Read_therm_serial146
  L_Read_therm_serial147
  L_Read_therm_serial148
  L_Read_therm_serial149
  L_Read_therm_serial150
  L_Read_therm_serial151
  L_Read_therm_serial152
  L_Read_therm_serial153
  L_Read_therm_serial154
  L_Read_therm_serial155
  L_Read_therm_serial156
  L_Read_therm_serial157
  L_Read_therm_serial158
  L_Read_therm_serial159
  L_Read_therm_serial160
  L_Read_therm_serial161
  L_Read_therm_serial162
  L_Read_therm_serial163
  L_Read_therm_serial164
  L_Read_therm_serial165
  L_Read_therm_serial166
  L_Read_therm_serial167
  L_Read_therm_serial168
  L_Read_therm_serial169
  L_Read_therm_serial170
  L_Read_therm_serial171
  L_Read_therm_serial172
  L_Read_therm_serial173
  L_Read_therm_serial174
  L_Read_therm_serial175
  L_Read_therm_serial176
  L_Initialize177
  L_Initialize178
  L_Initialize179
  L_Initialize180
  L_Initialize181
  L_Initialize182
  L_Initialize183
  L_main184
  L_main185
  L_main186
  L_main187
  L_main188
  L_main189
  L_main190
  L_main191
  L_main192
  L_main193
  L_main194
  L_main195
  L_main196
  L_main197
  L_main198
  L__set_channel199
  L__set_TX_power200
  L__Decoder_therm201
  L__Decoder_therm202
  L__Decoder_therm203
  L__Decoder_therm204
  L__Decoder_therm205
  L__Decoder_therm206
  L__Decoder_therm207
  L__Decoder_therm208
  L__Decoder_therm209
  L__Decoder_therm210
  L__Read_therm_serial211
  L__Read_therm_serial212
  L__Read_therm_serial213
  L__Read_therm_serial214
  L__Read_therm_serial215
  _write_ZIGBEE_short
  _read_ZIGBEE_short
  _write_ZIGBEE_long
  L__write_ZIGBEE_long216
  L__write_ZIGBEE_long217
  L__write_ZIGBEE_long218
  L__write_ZIGBEE_long219
  _read_ZIGBEE_long
  L__read_ZIGBEE_long220
  L__read_ZIGBEE_long221
  L__read_ZIGBEE_long222
  L__read_ZIGBEE_long223
  _start_transmit
  _read_RX_FIFO
  L__read_RX_FIFO224
  L__read_RX_FIFO225
  L__read_RX_FIFO226
  _set_ACK
  _set_not_ACK
  _set_encrypt
  _set_not_encrypt
  _write_TX_normal_FIFO
  L__write_TX_normal_FIFO227
  _pin_reset
  _PWR_reset
  _BB_reset
  _MAC_reset
  _software_reset
  _RF_reset
  _enable_interrupt
  _set_channel
  _set_CCA_mode
  _set_RSSI_mode
  _nonbeacon_PAN_coordinator_device
  _nonbeacon_coordinator_device
  _nonbeacon_device
  _set_IFS_recomended
  _set_IFS_default
  _set_reception_mode
  _set_frame_format_filter
  _flush_RX_FIFO_pointer
  _set_short_address
  _set_long_address
  _set_PAN_ID
  _set_wake_from_pin
  _pin_wake
  _enable_PLL
  _disable_PLL
  _set_TX_power
  _init_ZIGBEE_basic
  _init_ZIGBEE_nonbeacon
  _Debounce_INT
  _Decoder_therm
  L__Decoder_therm228
  _Read_therm_serial
  L__Read_therm_serial229
  L__Read_therm_serial230
  L__Read_therm_serial231
  L__Read_therm_serial232
  _Initialize
  _main
  L__main233
  L__main234
  L__main235
  L_Delay_1us0
  L_Delay_10us1
  L_Delay_22us2
  L_Delay_50us3
  L_Delay_80us4
  L_Delay_500us5
  L_Delay_5500us6
  L_Delay_8ms7
  L_Delay_100ms8
  L_Delay_10ms9
  L_Delay_1sec10
  L____Boot_Delay4k11
  L____Boot_Delay8k12
  L____Boot_Delay12k13
  L____Boot_Delay16k14
  L____Boot_Delay24k15
  L____Boot_Delay32k16
  L____Boot_Delay48k17
  L____Boot_Delay64k18
  L____Boot_Delay128k19
  L_Delay_Cyc20
  L_Delay_Cyc21
  L_VDelay_ms22
  L_VDelay_ms23
  L_VDelay_ms24
  _Get_Fosc_kHz
  _Delay_1us
  _Delay_10us
  _Delay_22us
  _Delay_50us
  _Delay_80us
  _Delay_500us
  _Delay_5500us
  _Delay_8ms
  _Delay_100ms
  _Delay_10ms
  _Delay_1sec
  ____Boot_Delay4k
  ____Boot_Delay8k
  ____Boot_Delay12k
  ____Boot_Delay16k
  ____Boot_Delay24k
  ____Boot_Delay32k
  ____Boot_Delay48k
  ____Boot_Delay64k
  ____Boot_Delay128k
  _Delay_Cyc
  _VDelay_ms
  L__VDelay_ms25
  L__VDelay_ms26
  L__VDelay_ms27
  L_EEPROM_Write0
  L_EEPROM_Write1
  _EEPROM_Read
  _EEPROM_Write
  L__EEPROM_Write2
  L__EEPROM_Write3
  L_Lcd_Cmd0
  L_Lcd_Cmd1
  L_Lcd_Out_CP2
  L_Lcd_Out_CP3
  L_Lcd_Chr4
  L_Lcd_Chr5
  L_Lcd_Chr6
  L_Lcd_Chr7
  L_Lcd_Chr8
  L_Lcd_Chr9
  L_Lcd_Chr10
  L_Lcd_Out11
  L_Lcd_Out12
  L_Lcd_Out13
  L_Lcd_Out14
  L_Lcd_Out15
  L_Lcd_Out16
  L_Lcd_Out17
  L_Lcd_Out18
  L_Lcd_Out19
  _Lcd_Cmd
  L__Lcd_Cmd20
  L__Lcd_Cmd21
  L__Lcd_Cmd22
  L__Lcd_Cmd23
  L__Lcd_Cmd24
  L__Lcd_Cmd25
  L__Lcd_Cmd26
  L__Lcd_Cmd27
  L__Lcd_Cmd28
  L__Lcd_Cmd29
  L__Lcd_Cmd30
  L__Lcd_Cmd31
  L__Lcd_Cmd32
  L__Lcd_Cmd33
  L__Lcd_Cmd34
  L__Lcd_Cmd35
  L__Lcd_Cmd36
  L__Lcd_Cmd37
  L__Lcd_Cmd38
  L__Lcd_Cmd39
  _Lcd_Chr_CP
  _Lcd_Out_CP
  _Lcd_Chr
  _Lcd_Init
  _Lcd_Out
  L_SPI1_Init_Advanced0
  L_SPI1_Init_Advanced1
  L_SPI1_Init_Advanced2
  L_SPI1_Init_Advanced3
  L_SPI1_Read4
  L_SPI1_Read5
  L_SPI1_Write6
  L_SPI1_Write7
  _SPI1_Init
  _SPI1_Init_Advanced
  _SPI1_Read
  _SPI1_Write
  _SPI_Set_Active
  _CC2D_Loop1
  _CC2DL_Loop1
  L_longjmp2
  ___CC2D
  ___CC2DW
  _____DoIFC
  _setjmp
  _longjmp
